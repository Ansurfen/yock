// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package main

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// YockInterfaceClient is the client API for YockInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type YockInterfaceClient interface {
	// Ping is used to detect whether the connection is available
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	Call(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallResponse, error)
	Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error)
}

type yockInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewYockInterfaceClient(cc grpc.ClientConnInterface) YockInterfaceClient {
	return &yockInterfaceClient{cc}
}

func (c *yockInterfaceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/Yocki.YockInterface/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yockInterfaceClient) Call(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallResponse, error) {
	out := new(CallResponse)
	err := c.cc.Invoke(ctx, "/Yocki.YockInterface/Call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yockInterfaceClient) Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, "/Yocki.YockInterface/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// YockInterfaceServer is the server API for YockInterface service.
// All implementations must embed UnimplementedYockInterfaceServer
// for forward compatibility
type YockInterfaceServer interface {
	// Ping is used to detect whether the connection is available
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	Call(context.Context, *CallRequest) (*CallResponse, error)
	Info(context.Context, *InfoRequest) (*InfoResponse, error)
	mustEmbedUnimplementedYockInterfaceServer()
}

// UnimplementedYockInterfaceServer must be embedded to have forward compatible implementations.
type UnimplementedYockInterfaceServer struct {
}

func (*UnimplementedYockInterfaceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedYockInterfaceServer) Call(context.Context, *CallRequest) (*CallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (*UnimplementedYockInterfaceServer) Info(context.Context, *InfoRequest) (*InfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (*UnimplementedYockInterfaceServer) mustEmbedUnimplementedYockInterfaceServer() {}

func RegisterYockInterfaceServer(s *grpc.Server, srv YockInterfaceServer) {
	s.RegisterService(&_YockInterface_serviceDesc, srv)
}

func _YockInterface_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YockInterfaceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Yocki.YockInterface/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YockInterfaceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YockInterface_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YockInterfaceServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Yocki.YockInterface/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YockInterfaceServer).Call(ctx, req.(*CallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YockInterface_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YockInterfaceServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Yocki.YockInterface/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YockInterfaceServer).Info(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _YockInterface_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Yocki.YockInterface",
	HandlerType: (*YockInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _YockInterface_Ping_Handler,
		},
		{
			MethodName: "Call",
			Handler:    _YockInterface_Call_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _YockInterface_Info_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yocki.proto",
}
