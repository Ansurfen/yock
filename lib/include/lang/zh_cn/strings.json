{
    "Clone": " Clone returns a fresh copy of s.\n--- It guarantees to make a copy of s into a new allocation,\n--- which can be important when retaining only a small substring\n--- of a much larger string. Using Clone can help such programs\n--- use less memory. Of course, since using Clone makes a copy,\n--- overuse of Clone can make programs use more memory.\n--- Clone should typically be used only rarely, and only when\n--- profiling indicates that it is needed.\n--- For strings of length zero the string \"\" will be returned\n--- and no allocation is made.",
    "Compare": " Compare returns an integer comparing two strings lexicographically.\n--- The result will be 0 if a == b, -1 if a \u003c b, and +1 if a \u003e b.\n---\n--- Compare is included only for symmetry with package bytes.\n--- It is usually clearer and always faster to use the built-in\n--- string comparison operators ==, \u003c, \u003e, and so on.",
    "Contains": " Contains reports whether substr is within s.",
    "ContainsAny": " ContainsAny reports whether any Unicode code points in chars are within s.",
    "ContainsRune": " ContainsRune reports whether the Unicode code point r is within s.",
    "Count": " Count counts the number of non-overlapping instances of substr in s.\n--- If substr is an empty string, Count returns 1 + the number of Unicode code points in s.",
    "Cut": " Cut slices s around the first instance of sep,\n--- returning the text before and after sep.\n--- The found result reports whether sep appears in s.\n--- If sep does not appear in s, cut returns s, \"\", false.",
    "CutPrefix": " CutPrefix returns s without the provided leading prefix string\n--- and reports whether it found the prefix.\n--- If s doesn't start with prefix, CutPrefix returns s, false.\n--- If prefix is the empty string, CutPrefix returns s, true.",
    "CutSuffix": " CutSuffix returns s without the provided ending suffix string\n--- and reports whether it found the suffix.\n--- If s doesn't end with suffix, CutSuffix returns s, false.\n--- If suffix is the empty string, CutSuffix returns s, true.",
    "EqualFold": " EqualFold reports whether s and t, interpreted as UTF-8 strings,\n--- are equal under simple Unicode case-folding, which is a more general\n--- form of case-insensitivity.",
    "Fields": " Fields splits the string s around each instance of one or more consecutive white space\n--- characters, as defined by unicode.IsSpace, returning a slice of substrings of s or an\n--- empty slice if s contains only white space.",
    "FieldsFunc": " FieldsFunc splits the string s at each run of Unicode code points c satisfying f(c)\n--- and returns an array of slices of s. If all code points in s satisfy f(c) or the\n--- string is empty, an empty slice is returned.\n---\n--- FieldsFunc makes no guarantees about the order in which it calls f(c)\n--- and assumes that f always returns the same value for a given c.",
    "HasPrefix": "测试字符串 s 是否以前缀 prefix 开头，如果是则返回 true，否则返回 false。",
    "HasSuffix": "测试字符串 s 是否以后缀 suffix 结尾，如果是则返回 true，否则返回 false。",
    "Index": "返回子串 substr 在字符串 s 中第一次出现的索引，如果 substr 不在 s 中，则返回 -1。",
    "IndexAny": "返回 chars 中任何一个 Unicode 字符第一次在字符串 s 中出现的索引，\n---如果 s 中没有来自 chars 的 Unicode 码点，则返回 -1。",
    "IndexByte": "返回字符 c 第一次在字符串 s 中出现的索引，如果 c 不在 s 中，则返回 -1。",
    "IndexFunc": "返回第一个满足 f(c) 的 Unicode 代码点 c 在字符串 s 中的索引，如果没有找到则返回 -1。",
    "IndexRune": " IndexRune returns the index of the first instance of the Unicode code point\n--- r, or -1 if rune is not present in s.\n--- If r is utf8.RuneError, it returns the first instance of any\n--- invalid UTF-8 byte sequence.",
    "Join": " Join concatenates the elements of its first argument to create a single string. The separator\n--- string sep is placed between elements in the resulting string.",
    "LastIndex": " LastIndex returns the index of the last instance of substr in s, or -1 if substr is not present in s.",
    "LastIndexAny": " LastIndexAny returns the index of the last instance of any Unicode code\n--- point from chars in s, or -1 if no Unicode code point from chars is\n--- present in s.",
    "LastIndexByte": " LastIndexByte returns the index of the last instance of c in s, or -1 if c is not present in s.",
    "LastIndexFunc": " LastIndexFunc returns the index into s of the last\n--- Unicode code point satisfying f(c), or -1 if none do.",
    "Map": " Map returns a copy of the string s with all its characters modified\n--- according to the mapping function. If mapping returns a negative value, the character is\n--- dropped from the string with no replacement.",
    "NewReader": " NewReader returns a new Reader reading from s.\n--- It is similar to bytes.NewBufferString but more efficient and read-only.",
    "NewReplacer": " NewReplacer returns a new Replacer from a list of old, new string\n--- pairs. Replacements are performed in the order they appear in the\n--- target string, without overlapping matches. The old string\n--- comparisons are done in argument order.\n---\n--- NewReplacer panics if given an odd number of arguments.",
    "Repeat": " Repeat returns a new string consisting of count copies of the string s.\n---\n--- It panics if count is negative or if the result of (len(s) * count)\n--- overflows.",
    "Replace": " Replace returns a copy of the string s with the first n\n--- non-overlapping instances of old replaced by new.\n--- If old is empty, it matches at the beginning of the string\n--- and after each UTF-8 sequence, yielding up to k+1 replacements\n--- for a k-rune string.\n--- If n \u003c 0, there is no limit on the number of replacements.",
    "ReplaceAll": " ReplaceAll returns a copy of the string s with all\n--- non-overlapping instances of old replaced by new.\n--- If old is empty, it matches at the beginning of the string\n--- and after each UTF-8 sequence, yielding up to k+1 replacements\n--- for a k-rune string.",
    "Split": " Split slices s into all substrings separated by sep and returns a slice of\n--- the substrings between those separators.\n---\n--- If s does not contain sep and sep is not empty, Split returns a\n--- slice of length 1 whose only element is s.\n---\n--- If sep is empty, Split splits after each UTF-8 sequence. If both s\n--- and sep are empty, Split returns an empty slice.\n---\n--- It is equivalent to SplitN with a count of -1.\n---\n--- To split around the first instance of a separator, see Cut.",
    "SplitAfter": " SplitAfter slices s into all substrings after each instance of sep and\n--- returns a slice of those substrings.\n---\n--- If s does not contain sep and sep is not empty, SplitAfter returns\n--- a slice of length 1 whose only element is s.\n---\n--- If sep is empty, SplitAfter splits after each UTF-8 sequence. If\n--- both s and sep are empty, SplitAfter returns an empty slice.\n---\n--- It is equivalent to SplitAfterN with a count of -1.",
    "SplitAfterN": " SplitAfterN slices s into substrings after each instance of sep and\n--- returns a slice of those substrings.\n---\n--- The count determines the number of substrings to return:\n---\n---\tn \u003e 0: at most n substrings; the last substring will be the unsplit remainder.\n---\tn == 0: the result is nil (zero substrings)\n---\tn \u003c 0: all substrings\n---\n--- Edge cases for s and sep (for example, empty strings) are handled\n--- as described in the documentation for SplitAfter.",
    "SplitN": " SplitN slices s into substrings separated by sep and returns a slice of\n--- the substrings between those separators.\n---\n--- The count determines the number of substrings to return:\n---\n---\tn \u003e 0: at most n substrings; the last substring will be the unsplit remainder.\n---\tn == 0: the result is nil (zero substrings)\n---\tn \u003c 0: all substrings\n---\n--- Edge cases for s and sep (for example, empty strings) are handled\n--- as described in the documentation for Split.\n---\n--- To split around the first instance of a separator, see Cut.",
    "Title": " Title returns a copy of the string s with all Unicode letters that begin words\n--- mapped to their Unicode title case.\n---\n--- Deprecated: The rule Title uses for word boundaries does not handle Unicode\n--- punctuation properly. Use golang.org/x/text/cases instead.",
    "ToLower": " ToLower returns s with all Unicode letters mapped to their lower case.",
    "ToLowerSpecial": " ToLowerSpecial returns a copy of the string s with all Unicode letters mapped to their\n--- lower case using the case mapping specified by c.",
    "ToTitle": " ToTitle returns a copy of the string s with all Unicode letters mapped to\n--- their Unicode title case.",
    "ToTitleSpecial": " ToTitleSpecial returns a copy of the string s with all Unicode letters mapped to their\n--- Unicode title case, giving priority to the special casing rules.",
    "ToUpper": " ToUpper returns s with all Unicode letters mapped to their upper case.",
    "ToUpperSpecial": " ToUpperSpecial returns a copy of the string s with all Unicode letters mapped to their\n--- upper case using the case mapping specified by c.",
    "ToValidUTF8": " ToValidUTF8 returns a copy of the string s with each run of invalid UTF-8 byte sequences\n--- replaced by the replacement string, which may be empty.",
    "Trim": " Trim returns a slice of the string s with all leading and\n--- trailing Unicode code points contained in cutset removed.",
    "TrimFunc": " TrimFunc returns a slice of the string s with all leading\n--- and trailing Unicode code points c satisfying f(c) removed.",
    "TrimLeft": " TrimLeft returns a slice of the string s with all leading\n--- Unicode code points contained in cutset removed.\n---\n--- To remove a prefix, use TrimPrefix instead.",
    "TrimLeftFunc": " TrimLeftFunc returns a slice of the string s with all leading\n--- Unicode code points c satisfying f(c) removed.",
    "TrimPrefix": " TrimPrefix returns s without the provided leading prefix string.\n--- If s doesn't start with prefix, s is returned unchanged.",
    "TrimRight": " TrimRight returns a slice of the string s, with all trailing\n--- Unicode code points contained in cutset removed.\n---\n--- To remove a suffix, use TrimSuffix instead.",
    "TrimRightFunc": " TrimRightFunc returns a slice of the string s with all trailing\n--- Unicode code points c satisfying f(c) removed.",
    "TrimSpace": " TrimSpace returns a slice of the string s, with all leading\n--- and trailing white space removed, as defined by Unicode.",
    "TrimSuffix": " TrimSuffix returns s without the provided trailing suffix string.\n--- If s doesn't end with suffix, s is returned unchanged."
}