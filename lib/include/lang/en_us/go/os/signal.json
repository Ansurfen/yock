{
	"signalIgnore": "--- Ignore causes the provided signals to be ignored. If they are received by\n--- the program, nothing will happen. Ignore undoes the effect of any prior\n--- calls to Notify for the provided signals.\n--- If no signals are provided, all incoming signals will be ignored.",
	"signalIgnored": "--- Ignored reports whether sig is currently ignored.",
	"signalNotify": "--- Notify causes package signal to relay incoming signals to c.\n--- If no signals are provided, all incoming signals will be relayed to c.\n--- Otherwise, just the provided signals will.\n---\n--- Package signal will not block sending to c: the caller must ensure\n--- that c has sufficient buffer space to keep up with the expected\n--- signal rate. For a channel used for notification of just one signal value,\n--- a buffer of size 1 is sufficient.\n---\n--- It is allowed to call Notify multiple times with the same channel:\n--- each call expands the set of signals sent to that channel.\n--- The only way to remove signals from the set is to call Stop.\n---\n--- It is allowed to call Notify multiple times with different channels\n--- and the same signals: each channel receives copies of incoming\n--- signals independently.",
	"signalNotifyContext": "--- NotifyContext returns a copy of the parent context that is marked done\n--- (its Done channel is closed) when one of the listed signals arrives,\n--- when the returned stop function is called, or when the parent context's\n--- Done channel is closed, whichever happens first.\n---\n--- The stop function unregisters the signal behavior, which, like signal.Reset,\n--- may restore the default behavior for a given signal. For example, the default\n--- behavior of a Go program receiving os.Interrupt is to exit. Calling\n--- NotifyContext(parent, os.Interrupt) will change the behavior to cancel\n--- the returned context. Future interrupts received will not trigger the default\n--- (exit) behavior until the returned stop function is called.\n---\n--- The stop function releases resources associated with it, so code should\n--- call stop as soon as the operations running in this Context complete and\n--- signals no longer need to be diverted to the context.",
	"signalReset": "--- Reset undoes the effect of any prior calls to Notify for the provided\n--- signals.\n--- If no signals are provided, all signal handlers will be reset.",
	"signalStop": "--- Stop causes package signal to stop relaying incoming signals to c.\n--- It undoes the effect of all prior calls to Notify using c.\n--- When Stop returns, it is guaranteed that c will receive no more signals."
}