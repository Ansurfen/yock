{
	"osChdir": "--- Chdir changes the current working directory to the named directory.\n--- If there is an error, it will be of type *PathError.",
	"osChmod": "--- Chmod changes the mode of the named file to mode.\n--- If the file is a symbolic link, it changes the mode of the link's target.\n--- If there is an error, it will be of type *PathError.\n---\n--- A different subset of the mode bits are used, depending on the\n--- operating system.\n---\n--- On Unix, the mode's permission bits, ModeSetuid, ModeSetgid, and\n--- ModeSticky are used.\n---\n--- On Windows, only the 0200 bit (owner writable) of mode is used; it\n--- controls whether the file's read-only attribute is set or cleared.\n--- The other bits are currently unused. For compatibility with Go 1.12\n--- and earlier, use a non-zero mode. Use mode 0400 for a read-only\n--- file and 0600 for a readable+writable file.\n---\n--- On Plan 9, the mode's permission bits, ModeAppend, ModeExclusive,\n--- and ModeTemporary are used.",
	"osChown": "--- Chown changes the numeric uid and gid of the named file.\n--- If the file is a symbolic link, it changes the uid and gid of the link's target.\n--- A uid or gid of -1 means to not change that value.\n--- If there is an error, it will be of type *PathError.\n---\n--- On Windows or Plan 9, Chown always returns the syscall.EWINDOWS or\n--- EPLAN9 error, wrapped in *PathError.",
	"osChtimes": "--- Chtimes changes the access and modification times of the named\n--- file, similar to the Unix utime() or utimes() functions.\n---\n--- The underlying filesystem may truncate or round the values to a\n--- less precise time unit.\n--- If there is an error, it will be of type *PathError.",
	"osClearenv": "--- Clearenv deletes all environment variables.",
	"osCreate": "--- Create creates or truncates the named file. If the file already exists,\n--- it is truncated. If the file does not exist, it is created with mode 0666\n--- (before umask). If successful, methods on the returned File can\n--- be used for I/O; the associated file descriptor has mode O_RDWR.\n--- If there is an error, it will be of type *PathError.",
	"osCreateTemp": "--- CreateTemp creates a new temporary file in the directory dir,\n--- opens the file for reading and writing, and returns the resulting file.\n--- The filename is generated by taking pattern and adding a random string to the end.\n--- If pattern includes a \"*\", the random string replaces the last \"*\".\n--- If dir is the empty string, CreateTemp uses the default directory for temporary files, as returned by TempDir.\n--- Multiple programs or goroutines calling CreateTemp simultaneously will not choose the same file.\n--- The caller can use the file's Name method to find the pathname of the file.\n--- It is the caller's responsibility to remove the file when it is no longer needed.",
	"osDirFS": "--- DirFS returns a file system (an fs.FS) for the tree of files rooted at the directory dir.\n---\n--- Note that DirFS(\"/prefix\") only guarantees that the Open calls it makes to the\n--- operating system will begin with \"/prefix\": DirFS(\"/prefix\").Open(\"file\") is the\n--- same as os.Open(\"/prefix/file\"). So if /prefix/file is a symbolic link pointing outside\n--- the /prefix tree, then using DirFS does not stop the access any more than using\n--- os.Open does. Additionally, the root of the fs.FS returned for a relative path,\n--- DirFS(\"prefix\"), will be affected by later calls to Chdir. DirFS is therefore not\n--- a general substitute for a chroot-style security mechanism when the directory tree\n--- contains arbitrary content.\n---\n--- The directory dir must not be \"\".\n---\n--- The result implements fs.StatFS.",
	"osEnviron": "--- Environ returns a copy of strings representing the environment,\n--- in the form \"key=value\".",
	"osExecutable": "--- Executable returns the path name for the executable that started\n--- the current process. There is no guarantee that the path is still\n--- pointing to the correct executable. If a symlink was used to start\n--- the process, depending on the operating system, the result might\n--- be the symlink or the path it pointed to. If a stable result is\n--- needed, path/filepath.EvalSymlinks might help.\n---\n--- Executable returns an absolute path unless an error occurred.\n---\n--- The main use case is finding resources located relative to an\n--- executable.",
	"osExit": "--- Exit causes the current program to exit with the given status code.\n--- Conventionally, code zero indicates success, non-zero an error.\n--- The program terminates immediately; deferred functions are not run.\n---\n--- For portability, the status code should be in the range [0, 125].",
	"osExpand": "--- Expand replaces ${var} or $var in the string based on the mapping function.\n--- For example, os.ExpandEnv(s) is equivalent to os.Expand(s, os.Getenv).",
	"osExpandEnv": "--- ExpandEnv replaces ${var} or $var in the string according to the values\n--- of the current environment variables. References to undefined\n--- variables are replaced by the empty string.",
	"osFindProcess": "--- FindProcess looks for a running process by its pid.\n---\n--- The Process it returns can be used to obtain information\n--- about the underlying operating system process.\n---\n--- On Unix systems, FindProcess always succeeds and returns a Process\n--- for the given pid, regardless of whether the process exists.",
	"osGetegid": "--- Getegid returns the numeric effective group id of the caller.\n---\n--- On Windows, it returns -1.",
	"osGetenv": "--- Getenv retrieves the value of the environment variable named by the key.\n--- It returns the value, which will be empty if the variable is not present.\n--- To distinguish between an empty value and an unset value, use LookupEnv.",
	"osGeteuid": "--- Geteuid returns the numeric effective user id of the caller.\n---\n--- On Windows, it returns -1.",
	"osGetgid": "--- Getgid returns the numeric group id of the caller.\n---\n--- On Windows, it returns -1.",
	"osGetgroups": "--- Getgroups returns a list of the numeric ids of groups that the caller belongs to.\n---\n--- On Windows, it returns syscall.EWINDOWS. See the os/user package\n--- for a possible alternative.",
	"osGetpagesize": "--- Getpagesize returns the underlying system's memory page size.",
	"osGetpid": "--- Getpid returns the process id of the caller.",
	"osGetppid": "--- Getppid returns the process id of the caller's parent.",
	"osGetuid": "--- Getuid returns the numeric user id of the caller.\n---\n--- On Windows, it returns -1.",
	"osGetwd": "--- Getwd returns a rooted path name corresponding to the\n--- current directory. If the current directory can be\n--- reached via multiple paths (due to symbolic links),\n--- Getwd may return any one of them.",
	"osHostname": "--- Hostname returns the host name reported by the kernel.",
	"osIsExist": "--- IsExist returns a boolean indicating whether the error is known to report\n--- that a file or directory already exists. It is satisfied by ErrExist as\n--- well as some syscall errors.\n---\n--- This function predates errors.Is. It only supports errors returned by\n--- the os package. New code should use errors.Is(err, fs.ErrExist).",
	"osIsNotExist": "--- IsNotExist returns a boolean indicating whether the error is known to\n--- report that a file or directory does not exist. It is satisfied by\n--- ErrNotExist as well as some syscall errors.\n---\n--- This function predates errors.Is. It only supports errors returned by\n--- the os package. New code should use errors.Is(err, fs.ErrNotExist).",
	"osIsPathSeparator": "--- IsPathSeparator reports whether c is a directory separator character.",
	"osIsPermission": "--- IsPermission returns a boolean indicating whether the error is known to\n--- report that permission is denied. It is satisfied by ErrPermission as well\n--- as some syscall errors.\n---\n--- This function predates errors.Is. It only supports errors returned by\n--- the os package. New code should use errors.Is(err, fs.ErrPermission).",
	"osIsTimeout": "--- IsTimeout returns a boolean indicating whether the error is known\n--- to report that a timeout occurred.\n---\n--- This function predates errors.Is, and the notion of whether an\n--- error indicates a timeout can be ambiguous. For example, the Unix\n--- error EWOULDBLOCK sometimes indicates a timeout and sometimes does not.\n--- New code should use errors.Is with a value appropriate to the call\n--- returning the error, such as os.ErrDeadlineExceeded.",
	"osLchown": "--- Lchown changes the numeric uid and gid of the named file.\n--- If the file is a symbolic link, it changes the uid and gid of the link itself.\n--- If there is an error, it will be of type *PathError.\n---\n--- On Windows, it always returns the syscall.EWINDOWS error, wrapped\n--- in *PathError.",
	"osLink": "--- Link creates newname as a hard link to the oldname file.\n--- If there is an error, it will be of type *LinkError.",
	"osLinkErrorError": "",
	"osLinkErrorUnwrap": "",
	"osLookupEnv": "--- LookupEnv retrieves the value of the environment variable named\n--- by the key. If the variable is present in the environment the\n--- value (which may be empty) is returned and the boolean is true.\n--- Otherwise the returned value will be empty and the boolean will\n--- be false.",
	"osLstat": "--- Lstat returns a FileInfo describing the named file.\n--- If the file is a symbolic link, the returned FileInfo\n--- describes the symbolic link. Lstat makes no attempt to follow the link.\n--- If there is an error, it will be of type *PathError.",
	"osMkdir": "--- Mkdir creates a new directory with the specified name and permission\n--- bits (before umask).\n--- If there is an error, it will be of type *PathError.",
	"osMkdirAll": "--- MkdirAll creates a directory named path,\n--- along with any necessary parents, and returns nil,\n--- or else returns an error.\n--- The permission bits perm (before umask) are used for all\n--- directories that MkdirAll creates.\n--- If path is already a directory, MkdirAll does nothing\n--- and returns nil.",
	"osMkdirTemp": "--- MkdirTemp creates a new temporary directory in the directory dir\n--- and returns the pathname of the new directory.\n--- The new directory's name is generated by adding a random string to the end of pattern.\n--- If pattern includes a \"*\", the random string replaces the last \"*\" instead.\n--- If dir is the empty string, MkdirTemp uses the default directory for temporary files, as returned by TempDir.\n--- Multiple programs or goroutines calling MkdirTemp simultaneously will not choose the same directory.\n--- It is the caller's responsibility to remove the directory when it is no longer needed.",
	"osNewFile": "--- NewFile returns a new File with the given file descriptor and\n--- name. The returned value will be nil if fd is not a valid file\n--- descriptor.",
	"osNewSyscallError": "--- NewSyscallError returns, as an error, a new SyscallError\n--- with the given system call name and error details.\n--- As a convenience, if err is nil, NewSyscallError returns nil.",
	"osOpen": "--- Open opens the named file for reading. If successful, methods on\n--- the returned file can be used for reading; the associated file\n--- descriptor has mode O_RDONLY.\n--- If there is an error, it will be of type *PathError.",
	"osOpenFile": "--- OpenFile is the generalized open call; most users will use Open\n--- or Create instead. It opens the named file with specified flag\n--- (O_RDONLY etc.). If the file does not exist, and the O_CREATE flag\n--- is passed, it is created with mode perm (before umask). If successful,\n--- methods on the returned File can be used for I/O.\n--- If there is an error, it will be of type *PathError.",
	"osPipe": "--- Pipe returns a connected pair of Files; reads from r return bytes written to w.\n--- It returns the files and an error, if any.",
	"osProcessStatesystemTime": "",
	"osProcessStateuserTime": "",
	"osProcessblockUntilWaitable": "--- blockUntilWaitable attempts to block until a call to p.Wait will\n--- succeed immediately, and reports whether it has done so.\n--- It does not actually call p.Wait.",
	"osReadDir": "--- ReadDir reads the named directory,\n--- returning all its directory entries sorted by filename.\n--- If an error occurs reading the directory,\n--- ReadDir returns the entries it was able to read before the error,\n--- along with the error.",
	"osReadFile": "--- ReadFile reads the named file and returns the contents.\n--- A successful call returns err == nil, not err == EOF.\n--- Because ReadFile reads the whole file, it does not treat an EOF from Read\n--- as an error to be reported.",
	"osReadlink": "--- Readlink returns the destination of the named symbolic link.\n--- If there is an error, it will be of type *PathError.",
	"osRemove": "--- Remove removes the named file or directory.\n--- If there is an error, it will be of type *PathError.",
	"osRemoveAll": "--- RemoveAll removes path and any children it contains.\n--- It removes everything it can but returns the first error\n--- it encounters. If the path does not exist, RemoveAll\n--- returns nil (no error).\n--- If there is an error, it will be of type *PathError.",
	"osRename": "--- Rename renames (moves) oldpath to newpath.\n--- If newpath already exists and is not a directory, Rename replaces it.\n--- OS-specific restrictions may apply when oldpath and newpath are in different directories.\n--- Even within the same directory, on non-Unix platforms Rename is not an atomic operation.\n--- If there is an error, it will be of type *LinkError.",
	"osSameFile": "--- SameFile reports whether fi1 and fi2 describe the same file.\n--- For example, on Unix this means that the device and inode fields\n--- of the two underlying structures are identical; on other systems\n--- the decision may be based on the path names.\n--- SameFile only applies to results returned by this package's Stat.\n--- It returns false in other cases.",
	"osSetenv": "--- Setenv sets the value of the environment variable named by the key.\n--- It returns an error, if any.",
	"osStartProcess": "--- StartProcess starts a new process with the program, arguments and attributes\n--- specified by name, argv and attr. The argv slice will become os.Args in the\n--- new process, so it normally starts with the program name.\n---\n--- If the calling goroutine has locked the operating system thread\n--- with runtime.LockOSThread and modified any inheritable OS-level\n--- thread state (for example, Linux or Plan 9 name spaces), the new\n--- process will inherit the caller's thread state.\n---\n--- StartProcess is a low-level interface. The os/exec package provides\n--- higher-level interfaces.\n---\n--- If there is an error, it will be of type *PathError.",
	"osStat": "--- Stat returns a FileInfo describing the named file.\n--- If there is an error, it will be of type *PathError.",
	"osSymlink": "--- Symlink creates newname as a symbolic link to oldname.\n--- On Windows, a symlink to a non-existent oldname creates a file symlink;\n--- if oldname is later created as a directory the symlink will not work.\n--- If there is an error, it will be of type *LinkError.",
	"osSyscallErrorError": "",
	"osSyscallErrorTimeout": "--- Timeout reports whether this error represents a timeout.",
	"osSyscallErrorUnwrap": "",
	"osTempDir": "--- TempDir returns the default directory to use for temporary files.\n---\n--- On Unix systems, it returns $TMPDIR if non-empty, else /tmp.\n--- On Windows, it uses GetTempPath, returning the first non-empty\n--- value from %TMP%, %TEMP%, %USERPROFILE%, or the Windows directory.\n--- On Plan 9, it returns /tmp.\n---\n--- The directory is neither guaranteed to exist nor have accessible\n--- permissions.",
	"osTruncate": "--- Truncate changes the size of the named file.\n--- If the file is a symbolic link, it changes the size of the link's target.",
	"osUnsetenv": "--- Unsetenv unsets a single environment variable.",
	"osUserCacheDir": "--- UserCacheDir returns the default root directory to use for user-specific\n--- cached data. Users should create their own application-specific subdirectory\n--- within this one and use that.\n---\n--- On Unix systems, it returns $XDG_CACHE_HOME as specified by\n--- https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html if\n--- non-empty, else $HOME/.cache.\n--- On Darwin, it returns $HOME/Library/Caches.\n--- On Windows, it returns %LocalAppData%.\n--- On Plan 9, it returns $home/lib/cache.\n---\n--- If the location cannot be determined (for example, $HOME is not defined),\n--- then it will return an error.",
	"osUserConfigDir": "--- UserConfigDir returns the default root directory to use for user-specific\n--- configuration data. Users should create their own application-specific\n--- subdirectory within this one and use that.\n---\n--- On Unix systems, it returns $XDG_CONFIG_HOME as specified by\n--- https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html if\n--- non-empty, else $HOME/.config.\n--- On Darwin, it returns $HOME/Library/Application Support.\n--- On Windows, it returns %AppData%.\n--- On Plan 9, it returns $home/lib.\n---\n--- If the location cannot be determined (for example, $HOME is not defined),\n--- then it will return an error.",
	"osUserHomeDir": "--- UserHomeDir returns the current user's home directory.\n---\n--- On Unix, including macOS, it returns the $HOME environment variable.\n--- On Windows, it returns %USERPROFILE%.\n--- On Plan 9, it returns the $home environment variable.",
	"osWriteFile": "--- WriteFile writes data to the named file, creating it if necessary.\n--- If the file does not exist, WriteFile creates it with permissions perm (before umask);\n--- otherwise WriteFile truncates it before writing, without changing permissions.\n--- Since Writefile requires multiple system calls to complete, a failure mid-operation\n--- can leave the file in a partially written state."
}