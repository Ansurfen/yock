{
	"atomicAddInt32": "--- AddInt32 atomically adds delta to *addr and returns the new value.\n--- Consider using the more ergonomic and less error-prone [Int32.Add] instead.",
	"atomicAddInt64": "--- AddInt64 atomically adds delta to *addr and returns the new value.\n--- Consider using the more ergonomic and less error-prone [Int64.Add] instead\n--- (particularly if you target 32-bit platforms; see the bugs section).",
	"atomicAddUint32": "--- AddUint32 atomically adds delta to *addr and returns the new value.\n--- To subtract a signed positive constant value c from x, do AddUint32(\u0026x, ^uint32(c-1)).\n--- In particular, to decrement x, do AddUint32(\u0026x, ^uint32(0)).\n--- Consider using the more ergonomic and less error-prone [Uint32.Add] instead.",
	"atomicAddUint64": "--- AddUint64 atomically adds delta to *addr and returns the new value.\n--- To subtract a signed positive constant value c from x, do AddUint64(\u0026x, ^uint64(c-1)).\n--- In particular, to decrement x, do AddUint64(\u0026x, ^uint64(0)).\n--- Consider using the more ergonomic and less error-prone [Uint64.Add] instead\n--- (particularly if you target 32-bit platforms; see the bugs section).",
	"atomicAddUintptr": "--- AddUintptr atomically adds delta to *addr and returns the new value.\n--- Consider using the more ergonomic and less error-prone [Uintptr.Add] instead.",
	"atomicBoolCompareAndSwap": "--- CompareAndSwap executes the compare-and-swap operation for the boolean value x.",
	"atomicBoolLoad": "--- Load atomically loads and returns the value stored in x.",
	"atomicBoolStore": "--- Store atomically stores val into x.",
	"atomicBoolSwap": "--- Swap atomically stores new into x and returns the previous value.",
	"atomicCompareAndSwapInt32": "--- CompareAndSwapInt32 executes the compare-and-swap operation for an int32 value.\n--- Consider using the more ergonomic and less error-prone [Int32.CompareAndSwap] instead.",
	"atomicCompareAndSwapInt64": "--- CompareAndSwapInt64 executes the compare-and-swap operation for an int64 value.\n--- Consider using the more ergonomic and less error-prone [Int64.CompareAndSwap] instead\n--- (particularly if you target 32-bit platforms; see the bugs section).",
	"atomicCompareAndSwapPointer": "--- CompareAndSwapPointer executes the compare-and-swap operation for a unsafe.Pointer value.\n--- Consider using the more ergonomic and less error-prone [Pointer.CompareAndSwap] instead.",
	"atomicCompareAndSwapUint32": "--- CompareAndSwapUint32 executes the compare-and-swap operation for a uint32 value.\n--- Consider using the more ergonomic and less error-prone [Uint32.CompareAndSwap] instead.",
	"atomicCompareAndSwapUint64": "--- CompareAndSwapUint64 executes the compare-and-swap operation for a uint64 value.\n--- Consider using the more ergonomic and less error-prone [Uint64.CompareAndSwap] instead\n--- (particularly if you target 32-bit platforms; see the bugs section).",
	"atomicCompareAndSwapUintptr": "--- CompareAndSwapUintptr executes the compare-and-swap operation for a uintptr value.\n--- Consider using the more ergonomic and less error-prone [Uintptr.CompareAndSwap] instead.",
	"atomicInt32Add": "--- Add atomically adds delta to x and returns the new value.",
	"atomicInt32CompareAndSwap": "--- CompareAndSwap executes the compare-and-swap operation for x.",
	"atomicInt32Load": "--- Load atomically loads and returns the value stored in x.",
	"atomicInt32Store": "--- Store atomically stores val into x.",
	"atomicInt32Swap": "--- Swap atomically stores new into x and returns the previous value.",
	"atomicInt64Add": "--- Add atomically adds delta to x and returns the new value.",
	"atomicInt64CompareAndSwap": "--- CompareAndSwap executes the compare-and-swap operation for x.",
	"atomicInt64Load": "--- Load atomically loads and returns the value stored in x.",
	"atomicInt64Store": "--- Store atomically stores val into x.",
	"atomicInt64Swap": "--- Swap atomically stores new into x and returns the previous value.",
	"atomicLoadInt32": "--- LoadInt32 atomically loads *addr.\n--- Consider using the more ergonomic and less error-prone [Int32.Load] instead.",
	"atomicLoadInt64": "--- LoadInt64 atomically loads *addr.\n--- Consider using the more ergonomic and less error-prone [Int64.Load] instead\n--- (particularly if you target 32-bit platforms; see the bugs section).",
	"atomicLoadPointer": "--- LoadPointer atomically loads *addr.\n--- Consider using the more ergonomic and less error-prone [Pointer.Load] instead.",
	"atomicLoadUint32": "--- LoadUint32 atomically loads *addr.\n--- Consider using the more ergonomic and less error-prone [Uint32.Load] instead.",
	"atomicLoadUint64": "--- LoadUint64 atomically loads *addr.\n--- Consider using the more ergonomic and less error-prone [Uint64.Load] instead\n--- (particularly if you target 32-bit platforms; see the bugs section).",
	"atomicLoadUintptr": "--- LoadUintptr atomically loads *addr.\n--- Consider using the more ergonomic and less error-prone [Uintptr.Load] instead.",
	"atomicStoreInt32": "--- StoreInt32 atomically stores val into *addr.\n--- Consider using the more ergonomic and less error-prone [Int32.Store] instead.",
	"atomicStoreInt64": "--- StoreInt64 atomically stores val into *addr.\n--- Consider using the more ergonomic and less error-prone [Int64.Store] instead\n--- (particularly if you target 32-bit platforms; see the bugs section).",
	"atomicStorePointer": "--- StorePointer atomically stores val into *addr.\n--- Consider using the more ergonomic and less error-prone [Pointer.Store] instead.",
	"atomicStoreUint32": "--- StoreUint32 atomically stores val into *addr.\n--- Consider using the more ergonomic and less error-prone [Uint32.Store] instead.",
	"atomicStoreUint64": "--- StoreUint64 atomically stores val into *addr.\n--- Consider using the more ergonomic and less error-prone [Uint64.Store] instead\n--- (particularly if you target 32-bit platforms; see the bugs section).",
	"atomicStoreUintptr": "--- StoreUintptr atomically stores val into *addr.\n--- Consider using the more ergonomic and less error-prone [Uintptr.Store] instead.",
	"atomicSwapInt32": "--- SwapInt32 atomically stores new into *addr and returns the previous *addr value.\n--- Consider using the more ergonomic and less error-prone [Int32.Swap] instead.",
	"atomicSwapInt64": "--- SwapInt64 atomically stores new into *addr and returns the previous *addr value.\n--- Consider using the more ergonomic and less error-prone [Int64.Swap] instead\n--- (particularly if you target 32-bit platforms; see the bugs section).",
	"atomicSwapPointer": "--- SwapPointer atomically stores new into *addr and returns the previous *addr value.\n--- Consider using the more ergonomic and less error-prone [Pointer.Swap] instead.",
	"atomicSwapUint32": "--- SwapUint32 atomically stores new into *addr and returns the previous *addr value.\n--- Consider using the more ergonomic and less error-prone [Uint32.Swap] instead.",
	"atomicSwapUint64": "--- SwapUint64 atomically stores new into *addr and returns the previous *addr value.\n--- Consider using the more ergonomic and less error-prone [Uint64.Swap] instead\n--- (particularly if you target 32-bit platforms; see the bugs section).",
	"atomicSwapUintptr": "--- SwapUintptr atomically stores new into *addr and returns the previous *addr value.\n--- Consider using the more ergonomic and less error-prone [Uintptr.Swap] instead.",
	"atomicUint32Add": "--- Add atomically adds delta to x and returns the new value.",
	"atomicUint32CompareAndSwap": "--- CompareAndSwap executes the compare-and-swap operation for x.",
	"atomicUint32Load": "--- Load atomically loads and returns the value stored in x.",
	"atomicUint32Store": "--- Store atomically stores val into x.",
	"atomicUint32Swap": "--- Swap atomically stores new into x and returns the previous value.",
	"atomicUint64Add": "--- Add atomically adds delta to x and returns the new value.",
	"atomicUint64CompareAndSwap": "--- CompareAndSwap executes the compare-and-swap operation for x.",
	"atomicUint64Load": "--- Load atomically loads and returns the value stored in x.",
	"atomicUint64Store": "--- Store atomically stores val into x.",
	"atomicUint64Swap": "--- Swap atomically stores new into x and returns the previous value.",
	"atomicUintptrAdd": "--- Add atomically adds delta to x and returns the new value.",
	"atomicUintptrCompareAndSwap": "--- CompareAndSwap executes the compare-and-swap operation for x.",
	"atomicUintptrLoad": "--- Load atomically loads and returns the value stored in x.",
	"atomicUintptrStore": "--- Store atomically stores val into x.",
	"atomicUintptrSwap": "--- Swap atomically stores new into x and returns the previous value.",
	"atomicValueCompareAndSwap": "--- CompareAndSwap executes the compare-and-swap operation for the Value.\n---\n--- All calls to CompareAndSwap for a given Value must use values of the same\n--- concrete type. CompareAndSwap of an inconsistent type panics, as does\n--- CompareAndSwap(old, nil).",
	"atomicValueLoad": "--- Load returns the value set by the most recent Store.\n--- It returns nil if there has been no call to Store for this Value.",
	"atomicValueStore": "--- Store sets the value of the Value v to val.\n--- All calls to Store for a given Value must use values of the same concrete type.\n--- Store of an inconsistent type panics, as does Store(nil).",
	"atomicValueSwap": "--- Swap stores new into Value and returns the previous value. It returns nil if\n--- the Value is empty.\n---\n--- All calls to Swap for a given Value must use values of the same concrete\n--- type. Swap of an inconsistent type panics, as does Swap(nil)."
}