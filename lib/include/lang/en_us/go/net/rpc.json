{
	"httpClientCall": "--- Call invokes the named function, waits for it to complete, and returns its error status.",
	"httpClientClose": "--- Close calls the underlying codec's Close method. If the connection is already\n--- shutting down, ErrShutdown is returned.",
	"httpClientGo": "--- Go invokes the function asynchronously. It returns the Call structure representing\n--- the invocation. The done channel will signal when the call is complete by returning\n--- the same Call object. If done is nil, Go will allocate a new channel.\n--- If non-nil, done must be buffered or Go will deliberately crash.",
	"httpClientinput": "",
	"httpClientsend": "",
	"httpServerAccept": "--- Accept accepts connections on the listener and serves requests\n--- for each incoming connection. Accept blocks until the listener\n--- returns a non-nil error. The caller typically invokes Accept in a\n--- go statement.",
	"httpServerHandleHTTP": "--- HandleHTTP registers an HTTP handler for RPC messages on rpcPath,\n--- and a debugging handler on debugPath.\n--- It is still necessary to invoke http.Serve(), typically in a go statement.",
	"httpServerRegister": "--- Register publishes in the server the set of methods of the\n--- receiver value that satisfy the following conditions:\n---   - exported method of exported type\n---   - two arguments, both of exported type\n---   - the second argument is a pointer\n---   - one return value, of type error\n---\n--- It returns an error if the receiver is not an exported type or has\n--- no suitable methods. It also logs the error using package log.\n--- The client accesses each method using a string of the form \"Type.Method\",\n--- where Type is the receiver's concrete type.",
	"httpServerRegisterName": "--- RegisterName is like Register but uses the provided name for the type\n--- instead of the receiver's concrete type.",
	"httpServerServeCodec": "--- ServeCodec is like ServeConn but uses the specified codec to\n--- decode requests and encode responses.",
	"httpServerServeConn": "--- ServeConn runs the server on a single connection.\n--- ServeConn blocks, serving the connection until the client hangs up.\n--- The caller typically invokes ServeConn in a go statement.\n--- ServeConn uses the gob wire format (see package gob) on the\n--- connection. To use an alternate codec, use ServeCodec.\n--- See NewClient's comment for information about concurrent access.",
	"httpServerServeHTTP": "--- ServeHTTP implements an http.Handler that answers RPC requests.",
	"httpServerServeRequest": "--- ServeRequest is like ServeCodec but synchronously serves a single request.\n--- It does not close the codec upon completion.",
	"httpServerfreeRequest": "",
	"httpServerfreeResponse": "",
	"httpServergetRequest": "",
	"httpServergetResponse": "",
	"httpServerreadRequest": "",
	"httpServerreadRequestHeader": "",
	"httpServerregister": "",
	"httpServersendResponse": "",
	"rpcAccept": "--- Accept accepts connections on the listener and serves requests\n--- to DefaultServer for each incoming connection.\n--- Accept blocks; the caller typically invokes it in a go statement.",
	"rpcCalldone": "",
	"rpcDial": "--- Dial connects to an RPC server at the specified network address.",
	"rpcDialHTTP": "--- DialHTTP connects to an HTTP RPC server at the specified network address\n--- listening on the default HTTP RPC path.",
	"rpcDialHTTPPath": "--- DialHTTPPath connects to an HTTP RPC server\n--- at the specified network address and path.",
	"rpcHandleHTTP": "--- HandleHTTP registers an HTTP handler for RPC messages to DefaultServer\n--- on DefaultRPCPath and a debugging handler on DefaultDebugPath.\n--- It is still necessary to invoke http.Serve(), typically in a go statement.",
	"rpcNewClient": "--- NewClient returns a new Client to handle requests to the\n--- set of services at the other end of the connection.\n--- It adds a buffer to the write side of the connection so\n--- the header and payload are sent as a unit.\n---\n--- The read and write halves of the connection are serialized independently,\n--- so no interlocking is required. However each half may be accessed\n--- concurrently so the implementation of conn should protect against\n--- concurrent reads or concurrent writes.",
	"rpcNewClientWithCodec": "--- NewClientWithCodec is like NewClient but uses the specified\n--- codec to encode requests and decode responses.",
	"rpcNewServer": "--- NewServer returns a new Server.",
	"rpcRegister": "--- Register publishes the receiver's methods in the DefaultServer.",
	"rpcRegisterName": "--- RegisterName is like Register but uses the provided name for the type\n--- instead of the receiver's concrete type.",
	"rpcServeCodec": "--- ServeCodec is like ServeConn but uses the specified codec to\n--- decode requests and encode responses.",
	"rpcServeConn": "--- ServeConn runs the DefaultServer on a single connection.\n--- ServeConn blocks, serving the connection until the client hangs up.\n--- The caller typically invokes ServeConn in a go statement.\n--- ServeConn uses the gob wire format (see package gob) on the\n--- connection. To use an alternate codec, use ServeCodec.\n--- See NewClient's comment for information about concurrent access.",
	"rpcServeRequest": "--- ServeRequest is like ServeCodec but synchronously serves a single request.\n--- It does not close the codec upon completion.",
	"rpcServerErrorError": ""
}