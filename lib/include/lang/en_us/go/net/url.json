{
	"netErrorError": "",
	"netErrorTemporary": "",
	"netErrorTimeout": "",
	"netErrorUnwrap": "",
	"urlEscapeErrorError": "",
	"urlInvalidHostErrorError": "",
	"urlJoinPath": "--- JoinPath returns a URL string with the provided path elements joined to\n--- the existing path of base and the resulting path cleaned of any ./ or ../ elements.",
	"urlParse": "--- Parse parses a raw url into a URL structure.\n---\n--- The url may be relative (a path, without a host) or absolute\n--- (starting with a scheme). Trying to parse a hostname and path\n--- without a scheme is invalid but may not necessarily return an\n--- error, due to parsing ambiguities.",
	"urlParseQuery": "--- ParseQuery parses the URL-encoded query string and returns\n--- a map listing the values specified for each key.\n--- ParseQuery always returns a non-nil map containing all the\n--- valid query parameters found; err describes the first decoding error\n--- encountered, if any.\n---\n--- Query is expected to be a list of key=value settings separated by ampersands.\n--- A setting without an equals sign is interpreted as a key set to an empty\n--- value.\n--- Settings containing a non-URL-encoded semicolon are considered invalid.",
	"urlParseRequestURI": "--- ParseRequestURI parses a raw url into a URL structure. It assumes that\n--- url was received in an HTTP request, so the url is interpreted\n--- only as an absolute URI or an absolute path.\n--- The string url is assumed not to have a #fragment suffix.\n--- (Web browsers strip #fragment before sending the URL to a web server.)",
	"urlPathEscape": "--- PathEscape escapes the string so it can be safely placed inside a URL path segment,\n--- replacing special characters (including /) with %XX sequences as needed.",
	"urlPathUnescape": "--- PathUnescape does the inverse transformation of PathEscape,\n--- converting each 3-byte encoded substring of the form \"%AB\" into the\n--- hex-decoded byte 0xAB. It returns an error if any % is not followed\n--- by two hexadecimal digits.\n---\n--- PathUnescape is identical to QueryUnescape except that it does not\n--- unescape '+' to ' ' (space).",
	"urlQueryEscape": "--- QueryEscape escapes the string so it can be safely placed\n--- inside a URL query.",
	"urlQueryUnescape": "--- QueryUnescape does the inverse transformation of QueryEscape,\n--- converting each 3-byte encoded substring of the form \"%AB\" into the\n--- hex-decoded byte 0xAB.\n--- It returns an error if any % is not followed by two hexadecimal\n--- digits.",
	"urlURLEscapedFragment": "--- EscapedFragment returns the escaped form of u.Fragment.\n--- In general there are multiple possible escaped forms of any fragment.\n--- EscapedFragment returns u.RawFragment when it is a valid escaping of u.Fragment.\n--- Otherwise EscapedFragment ignores u.RawFragment and computes an escaped\n--- form on its own.\n--- The String method uses EscapedFragment to construct its result.\n--- In general, code should call EscapedFragment instead of\n--- reading u.RawFragment directly.",
	"urlURLEscapedPath": "--- EscapedPath returns the escaped form of u.Path.\n--- In general there are multiple possible escaped forms of any path.\n--- EscapedPath returns u.RawPath when it is a valid escaping of u.Path.\n--- Otherwise EscapedPath ignores u.RawPath and computes an escaped\n--- form on its own.\n--- The String and RequestURI methods use EscapedPath to construct\n--- their results.\n--- In general, code should call EscapedPath instead of\n--- reading u.RawPath directly.",
	"urlURLHostname": "--- Hostname returns u.Host, stripping any valid port number if present.\n---\n--- If the result is enclosed in square brackets, as literal IPv6 addresses are,\n--- the square brackets are removed from the result.",
	"urlURLIsAbs": "--- IsAbs reports whether the URL is absolute.\n--- Absolute means that it has a non-empty scheme.",
	"urlURLJoinPath": "--- JoinPath returns a new URL with the provided path elements joined to\n--- any existing path and the resulting path cleaned of any ./ or ../ elements.\n--- Any sequences of multiple / characters will be reduced to a single /.",
	"urlURLMarshalBinary": "",
	"urlURLParse": "--- Parse parses a URL in the context of the receiver. The provided URL\n--- may be relative or absolute. Parse returns nil, err on parse\n--- failure, otherwise its return value is the same as ResolveReference.",
	"urlURLPort": "--- Port returns the port part of u.Host, without the leading colon.\n---\n--- If u.Host doesn't contain a valid numeric port, Port returns an empty string.",
	"urlURLQuery": "--- Query parses RawQuery and returns the corresponding values.\n--- It silently discards malformed value pairs.\n--- To check errors use ParseQuery.",
	"urlURLRedacted": "--- Redacted is like String but replaces any password with \"xxxxx\".\n--- Only the password in u.URL is redacted.",
	"urlURLRequestURI": "--- RequestURI returns the encoded path?query or opaque?query\n--- string that would be used in an HTTP request for u.",
	"urlURLResolveReference": "--- ResolveReference resolves a URI reference to an absolute URI from\n--- an absolute base URI u, per RFC 3986 Section 5.2. The URI reference\n--- may be relative or absolute. ResolveReference always returns a new\n--- URL instance, even if the returned URL is identical to either the\n--- base or reference. If ref is an absolute URL, then ResolveReference\n--- ignores base and returns a copy of ref.",
	"urlURLString": "--- String reassembles the URL into a valid URL string.\n--- The general form of the result is one of:\n---\n---\tscheme:opaque?query#fragment\n---\tscheme://userinfo@host/path?query#fragment\n---\n--- If u.Opaque is non-empty, String uses the first form;\n--- otherwise it uses the second form.\n--- Any non-ASCII characters in host are escaped.\n--- To obtain the path, String uses u.EscapedPath().\n---\n--- In the second form, the following rules apply:\n---   - if u.Scheme is empty, scheme: is omitted.\n---   - if u.User is nil, userinfo@ is omitted.\n---   - if u.Host is empty, host/ is omitted.\n---   - if u.Scheme and u.Host are empty and u.User is nil,\n---     the entire scheme://userinfo@host/ is omitted.\n---   - if u.Host is non-empty and u.Path begins with a /,\n---     the form host/path does not add its own /.\n---   - if u.RawQuery is empty, ?query is omitted.\n---   - if u.Fragment is empty, #fragment is omitted.",
	"urlURLUnmarshalBinary": "",
	"urlURLsetFragment": "--- setFragment is like setPath but for Fragment/RawFragment.",
	"urlURLsetPath": "--- setPath sets the Path and RawPath fields of the URL based on the provided\n--- escaped path p. It maintains the invariant that RawPath is only specified\n--- when it differs from the default encoding of the path.\n--- For example:\n--- - setPath(\"/foo/bar\")   will set Path=\"/foo/bar\" and RawPath=\"\"\n--- - setPath(\"/foo%2fbar\") will set Path=\"/foo/bar\" and RawPath=\"/foo%2fbar\"\n--- setPath will return an error only if the provided path contains an invalid\n--- escaping.",
	"urlUser": "--- User returns a Userinfo containing the provided username\n--- and no password set.",
	"urlUserPassword": "--- UserPassword returns a Userinfo containing the provided username\n--- and password.\n---\n--- This functionality should only be used with legacy web sites.\n--- RFC 2396 warns that interpreting Userinfo this way\n--- “is NOT RECOMMENDED, because the passing of authentication\n--- information in clear text (such as URI) has proven to be a\n--- security risk in almost every case where it has been used.”",
	"urlUserinfoPassword": "--- Password returns the password in case it is set, and whether it is set.",
	"urlUserinfoString": "--- String returns the encoded userinfo information in the standard form\n--- of \"username[:password]\".",
	"urlUserinfoUsername": "--- Username returns the username.",
	"urlValuesAdd": "--- Add adds the value to key. It appends to any existing\n--- values associated with key.",
	"urlValuesDel": "--- Del deletes the values associated with key.",
	"urlValuesEncode": "--- Encode encodes the values into “URL encoded” form\n--- (\"bar=baz\u0026foo=quux\") sorted by key.",
	"urlValuesGet": "--- Get gets the first value associated with the given key.\n--- If there are no values associated with the key, Get returns\n--- the empty string. To access multiple values, use the map\n--- directly.",
	"urlValuesHas": "--- Has checks whether a given key is set.",
	"urlValuesSet": "--- Set sets the key to value. It replaces any existing\n--- values."
}