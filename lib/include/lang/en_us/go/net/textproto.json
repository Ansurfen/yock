{
	"httpProtocolErrorError": "",
	"netConnClose": "--- Close closes the connection.",
	"netConnCmd": "--- Cmd is a convenience method that sends a command after\n--- waiting its turn in the pipeline. The command text is the\n--- result of formatting format with args and appending \\r\\n.\n--- Cmd returns the id of the command, for use with StartResponse and EndResponse.\n---\n--- For example, a client might run a HELP command that returns a dot-body\n--- by using:\n---\n---\tid, err := c.Cmd(\"HELP\")\n---\tif err != nil {\n---\t\treturn nil, err\n---\t}\n---\n---\tc.StartResponse(id)\n---\tdefer c.EndResponse(id)\n---\n---\tif _, _, err = c.ReadCodeLine(110); err != nil {\n---\t\treturn nil, err\n---\t}\n---\ttext, err := c.ReadDotBytes()\n---\tif err != nil {\n---\t\treturn nil, err\n---\t}\n---\treturn c.ReadCodeLine(250)",
	"netErrorError": "",
	"textprotoCanonicalMIMEHeaderKey": "--- CanonicalMIMEHeaderKey returns the canonical format of the\n--- MIME header key s. The canonicalization converts the first\n--- letter and any letter following a hyphen to upper case;\n--- the rest are converted to lowercase. For example, the\n--- canonical key for \"accept-encoding\" is \"Accept-Encoding\".\n--- MIME header keys are assumed to be ASCII only.\n--- If s contains a space or invalid header field bytes, it is\n--- returned without modifications.",
	"textprotoDial": "--- Dial connects to the given address on the given network using net.Dial\n--- and then returns a new Conn for the connection.",
	"textprotoMIMEHeaderAdd": "--- Add adds the key, value pair to the header.\n--- It appends to any existing values associated with key.",
	"textprotoMIMEHeaderDel": "--- Del deletes the values associated with key.",
	"textprotoMIMEHeaderGet": "--- Get gets the first value associated with the given key.\n--- It is case insensitive; CanonicalMIMEHeaderKey is used\n--- to canonicalize the provided key.\n--- If there are no values associated with the key, Get returns \"\".\n--- To use non-canonical keys, access the map directly.",
	"textprotoMIMEHeaderSet": "--- Set sets the header entries associated with key to\n--- the single element value. It replaces any existing\n--- values associated with key.",
	"textprotoMIMEHeaderValues": "--- Values returns all values associated with the given key.\n--- It is case insensitive; CanonicalMIMEHeaderKey is\n--- used to canonicalize the provided key. To use non-canonical\n--- keys, access the map directly.\n--- The returned slice is not a copy.",
	"textprotoNewConn": "--- NewConn returns a new Conn using conn for I/O.",
	"textprotoNewReader": "--- NewReader returns a new Reader reading from r.\n---\n--- To avoid denial of service attacks, the provided bufio.Reader\n--- should be reading from an io.LimitReader or similar Reader to bound\n--- the size of responses.",
	"textprotoNewWriter": "--- NewWriter returns a new Writer writing to w.",
	"textprotoPipelineEndRequest": "--- EndRequest notifies p that the request with the given id has been sent\n--- (or, if this is a server, received).",
	"textprotoPipelineEndResponse": "--- EndResponse notifies p that the response with the given id has been received\n--- (or, if this is a server, sent).",
	"textprotoPipelineNext": "--- Next returns the next id for a request/response pair.",
	"textprotoPipelineStartRequest": "--- StartRequest blocks until it is time to send (or, if this is a server, receive)\n--- the request with the given id.",
	"textprotoPipelineStartResponse": "--- StartResponse blocks until it is time to receive (or, if this is a server, send)\n--- the request with the given id.",
	"textprotoReaderDotReader": "--- DotReader returns a new Reader that satisfies Reads using the\n--- decoded text of a dot-encoded block read from r.\n--- The returned Reader is only valid until the next call\n--- to a method on r.\n---\n--- Dot encoding is a common framing used for data blocks\n--- in text protocols such as SMTP.  The data consists of a sequence\n--- of lines, each of which ends in \"\\r\\n\".  The sequence itself\n--- ends at a line containing just a dot: \".\\r\\n\".  Lines beginning\n--- with a dot are escaped with an additional dot to avoid\n--- looking like the end of the sequence.\n---\n--- The decoded form returned by the Reader's Read method\n--- rewrites the \"\\r\\n\" line endings into the simpler \"\\n\",\n--- removes leading dot escapes if present, and stops with error io.EOF\n--- after consuming (and discarding) the end-of-sequence line.",
	"textprotoReaderReadCodeLine": "--- ReadCodeLine reads a response code line of the form\n---\n---\tcode message\n---\n--- where code is a three-digit status code and the message\n--- extends to the rest of the line. An example of such a line is:\n---\n---\t220 plan9.bell-labs.com ESMTP\n---\n--- If the prefix of the status does not match the digits in expectCode,\n--- ReadCodeLine returns with err set to \u0026Error{code, message}.\n--- For example, if expectCode is 31, an error will be returned if\n--- the status is not in the range [310,319].\n---\n--- If the response is multi-line, ReadCodeLine returns an error.\n---\n--- An expectCode \u003c= 0 disables the check of the status code.",
	"textprotoReaderReadContinuedLine": "--- ReadContinuedLine reads a possibly continued line from r,\n--- eliding the final trailing ASCII white space.\n--- Lines after the first are considered continuations if they\n--- begin with a space or tab character. In the returned data,\n--- continuation lines are separated from the previous line\n--- only by a single space: the newline and leading white space\n--- are removed.\n---\n--- For example, consider this input:\n---\n---\tLine 1\n---\t  continued...\n---\tLine 2\n---\n--- The first call to ReadContinuedLine will return \"Line 1 continued...\"\n--- and the second will return \"Line 2\".\n---\n--- Empty lines are never continued.",
	"textprotoReaderReadContinuedLineBytes": "--- ReadContinuedLineBytes is like ReadContinuedLine but\n--- returns a []byte instead of a string.",
	"textprotoReaderReadDotBytes": "--- ReadDotBytes reads a dot-encoding and returns the decoded data.\n---\n--- See the documentation for the DotReader method for details about dot-encoding.",
	"textprotoReaderReadDotLines": "--- ReadDotLines reads a dot-encoding and returns a slice\n--- containing the decoded lines, with the final \\r\\n or \\n elided from each.\n---\n--- See the documentation for the DotReader method for details about dot-encoding.",
	"textprotoReaderReadLine": "--- ReadLine reads a single line from r,\n--- eliding the final \\n or \\r\\n from the returned string.",
	"textprotoReaderReadLineBytes": "--- ReadLineBytes is like ReadLine but returns a []byte instead of a string.",
	"textprotoReaderReadMIMEHeader": "--- ReadMIMEHeader reads a MIME-style header from r.\n--- The header is a sequence of possibly continued Key: Value lines\n--- ending in a blank line.\n--- The returned map m maps CanonicalMIMEHeaderKey(key) to a\n--- sequence of values in the same order encountered in the input.\n---\n--- For example, consider this input:\n---\n---\tMy-Key: Value 1\n---\tLong-Key: Even\n---\t       Longer Value\n---\tMy-Key: Value 2\n---\n--- Given that input, ReadMIMEHeader returns the map:\n---\n---\tmap[string][]string{\n---\t\t\"My-Key\": {\"Value 1\", \"Value 2\"},\n---\t\t\"Long-Key\": {\"Even Longer Value\"},\n---\t}",
	"textprotoReaderReadResponse": "--- ReadResponse reads a multi-line response of the form:\n---\n---\tcode-message line 1\n---\tcode-message line 2\n---\t...\n---\tcode message line n\n---\n--- where code is a three-digit status code. The first line starts with the\n--- code and a hyphen. The response is terminated by a line that starts\n--- with the same code followed by a space. Each line in message is\n--- separated by a newline (\\n).\n---\n--- See page 36 of RFC 959 (https://www.ietf.org/rfc/rfc959.txt) for\n--- details of another form of response accepted:\n---\n---\tcode-message line 1\n---\tmessage line 2\n---\t...\n---\tcode message line n\n---\n--- If the prefix of the status does not match the digits in expectCode,\n--- ReadResponse returns with err set to \u0026Error{code, message}.\n--- For example, if expectCode is 31, an error will be returned if\n--- the status is not in the range [310,319].\n---\n--- An expectCode \u003c= 0 disables the check of the status code.",
	"textprotoReadercloseDot": "--- closeDot drains the current DotReader if any,\n--- making sure that it reads until the ending dot line.",
	"textprotoReaderreadCodeLine": "",
	"textprotoReaderreadContinuedLineSlice": "--- readContinuedLineSlice reads continued lines from the reader buffer,\n--- returning a byte slice with all lines. The validateFirstLine function\n--- is run on the first read line, and if it returns an error then this\n--- error is returned from readContinuedLineSlice.",
	"textprotoReaderreadLineSlice": "",
	"textprotoReaderskipSpace": "--- skipSpace skips R over all spaces and returns the number of bytes skipped.",
	"textprotoReaderupcomingHeaderNewlines": "--- upcomingHeaderNewlines returns an approximation of the number of newlines\n--- that will be in this header. If it gets confused, it returns 0.",
	"textprotoTrimBytes": "--- TrimBytes returns b without leading and trailing ASCII space.",
	"textprotoTrimString": "--- TrimString returns s without leading and trailing ASCII space.",
	"textprotoWriterDotWriter": "--- DotWriter returns a writer that can be used to write a dot-encoding to w.\n--- It takes care of inserting leading dots when necessary,\n--- translating line-ending \\n into \\r\\n, and adding the final .\\r\\n line\n--- when the DotWriter is closed. The caller should close the\n--- DotWriter before the next call to a method on w.\n---\n--- See the documentation for Reader's DotReader method for details about dot-encoding.",
	"textprotoWriterPrintfLine": "--- PrintfLine writes the formatted output followed by \\r\\n.",
	"textprotoWritercloseDot": ""
}