{
	"netAddrErrorError": "",
	"netAddrErrorTemporary": "",
	"netAddrErrorTimeout": "",
	"netBuffersRead": "--- Read from the buffers.\n---\n--- Read implements io.Reader for Buffers.\n---\n--- Read modifies the slice v as well as v[i] for 0 \u003c= i \u003c len(v),\n--- but does not modify v[i][j] for any i, j.",
	"netBuffersWriteTo": "--- WriteTo writes contents of the buffers to w.\n---\n--- WriteTo implements io.WriterTo for Buffers.\n---\n--- WriteTo modifies the slice v as well as v[i] for 0 \u003c= i \u003c len(v),\n--- but does not modify v[i][j] for any i, j.",
	"netBuffersconsume": "",
	"netCIDRMask": "--- CIDRMask returns an IPMask consisting of 'ones' 1 bits\n--- followed by 0s up to a total length of 'bits' bits.\n--- For a mask of this form, CIDRMask is the inverse of IPMask.Size.",
	"netDNSConfigErrorError": "",
	"netDNSConfigErrorTemporary": "",
	"netDNSConfigErrorTimeout": "",
	"netDNSConfigErrorUnwrap": "",
	"netDNSErrorError": "",
	"netDNSErrorTemporary": "--- Temporary reports whether the DNS error is known to be temporary.\n--- This is not always known; a DNS lookup may fail due to a temporary\n--- error and return a DNSError for which Temporary returns false.",
	"netDNSErrorTimeout": "--- Timeout reports whether the DNS lookup is known to have timed out.\n--- This is not always known; a DNS lookup may fail due to a timeout\n--- and return a DNSError for which Timeout returns false.",
	"netDial": "--- Dial connects to the address on the named network.\n---\n--- Known networks are \"tcp\", \"tcp4\" (IPv4-only), \"tcp6\" (IPv6-only),\n--- \"udp\", \"udp4\" (IPv4-only), \"udp6\" (IPv6-only), \"ip\", \"ip4\"\n--- (IPv4-only), \"ip6\" (IPv6-only), \"unix\", \"unixgram\" and\n--- \"unixpacket\".\n---\n--- For TCP and UDP networks, the address has the form \"host:port\".\n--- The host must be a literal IP address, or a host name that can be\n--- resolved to IP addresses.\n--- The port must be a literal port number or a service name.\n--- If the host is a literal IPv6 address it must be enclosed in square\n--- brackets, as in \"[2001:db8::1]:80\" or \"[fe80::1%zone]:80\".\n--- The zone specifies the scope of the literal IPv6 address as defined\n--- in RFC 4007.\n--- The functions JoinHostPort and SplitHostPort manipulate a pair of\n--- host and port in this form.\n--- When using TCP, and the host resolves to multiple IP addresses,\n--- Dial will try each IP address in order until one succeeds.\n---\n--- Examples:\n---\n---\tDial(\"tcp\", \"golang.org:http\")\n---\tDial(\"tcp\", \"192.0.2.1:http\")\n---\tDial(\"tcp\", \"198.51.100.1:80\")\n---\tDial(\"udp\", \"[2001:db8::1]:domain\")\n---\tDial(\"udp\", \"[fe80::1%lo0]:53\")\n---\tDial(\"tcp\", \":80\")\n---\n--- For IP networks, the network must be \"ip\", \"ip4\" or \"ip6\" followed\n--- by a colon and a literal protocol number or a protocol name, and\n--- the address has the form \"host\". The host must be a literal IP\n--- address or a literal IPv6 address with zone.\n--- It depends on each operating system how the operating system\n--- behaves with a non-well known protocol number such as \"0\" or \"255\".\n---\n--- Examples:\n---\n---\tDial(\"ip4:1\", \"192.0.2.1\")\n---\tDial(\"ip6:ipv6-icmp\", \"2001:db8::1\")\n---\tDial(\"ip6:58\", \"fe80::1%lo0\")\n---\n--- For TCP, UDP and IP networks, if the host is empty or a literal\n--- unspecified IP address, as in \":80\", \"0.0.0.0:80\" or \"[::]:80\" for\n--- TCP and UDP, \"\", \"0.0.0.0\" or \"::\" for IP, the local system is\n--- assumed.\n---\n--- For Unix networks, the address must be a file system path.",
	"netDialIP": "--- DialIP acts like Dial for IP networks.\n---\n--- The network must be an IP network name; see func Dial for details.\n---\n--- If laddr is nil, a local address is automatically chosen.\n--- If the IP field of raddr is nil or an unspecified IP address, the\n--- local system is assumed.",
	"netDialTCP": "--- DialTCP acts like Dial for TCP networks.\n---\n--- The network must be a TCP network name; see func Dial for details.\n---\n--- If laddr is nil, a local address is automatically chosen.\n--- If the IP field of raddr is nil or an unspecified IP address, the\n--- local system is assumed.",
	"netDialTimeout": "--- DialTimeout acts like Dial but takes a timeout.\n---\n--- The timeout includes name resolution, if required.\n--- When using TCP, and the host in the address parameter resolves to\n--- multiple IP addresses, the timeout is spread over each consecutive\n--- dial, such that each is given an appropriate fraction of the time\n--- to connect.\n---\n--- See func Dial for a description of the network and address\n--- parameters.",
	"netDialUDP": "--- DialUDP acts like Dial for UDP networks.\n---\n--- The network must be a UDP network name; see func Dial for details.\n---\n--- If laddr is nil, a local address is automatically chosen.\n--- If the IP field of raddr is nil or an unspecified IP address, the\n--- local system is assumed.",
	"netDialUnix": "--- DialUnix acts like Dial for Unix networks.\n---\n--- The network must be a Unix network name; see func Dial for details.\n---\n--- If laddr is non-nil, it is used as the local address for the\n--- connection.",
	"netDialerDial": "--- Dial connects to the address on the named network.\n---\n--- See func Dial for a description of the network and address\n--- parameters.\n---\n--- Dial uses context.Background internally; to specify the context, use\n--- DialContext.",
	"netDialerDialContext": "--- DialContext connects to the address on the named network using\n--- the provided context.\n---\n--- The provided Context must be non-nil. If the context expires before\n--- the connection is complete, an error is returned. Once successfully\n--- connected, any expiration of the context will not affect the\n--- connection.\n---\n--- When using TCP, and the host in the address parameter resolves to multiple\n--- network addresses, any dial timeout (from d.Timeout or ctx) is spread\n--- over each consecutive dial, such that each is given an appropriate\n--- fraction of the time to connect.\n--- For example, if a host has 4 IP addresses and the timeout is 1 minute,\n--- the connect to each single address will be given 15 seconds to complete\n--- before trying the next one.\n---\n--- See func Dial for a description of the network and address\n--- parameters.",
	"netDialerdeadline": "--- deadline returns the earliest of:\n---   - now+Timeout\n---   - d.Deadline\n---   - the context's deadline\n---\n--- Or zero, if none of Timeout, Deadline, or context's deadline is set.",
	"netDialerdualStack": "",
	"netDialerfallbackDelay": "",
	"netDialerresolver": "",
	"netFileConn": "--- FileConn returns a copy of the network connection corresponding to\n--- the open file f.\n--- It is the caller's responsibility to close f when finished.\n--- Closing c does not affect f, and closing f does not affect c.",
	"netFileListener": "--- FileListener returns a copy of the network listener corresponding\n--- to the open file f.\n--- It is the caller's responsibility to close ln when finished.\n--- Closing ln does not affect f, and closing f does not affect ln.",
	"netFilePacketConn": "--- FilePacketConn returns a copy of the packet network connection\n--- corresponding to the open file f.\n--- It is the caller's responsibility to close f when finished.\n--- Closing c does not affect f, and closing f does not affect c.",
	"netFlagsString": "",
	"netHardwareAddrString": "",
	"netIPAddrfamily": "",
	"netIPAddrsockaddr": "",
	"netIPAddrtoLocal": "",
	"netIPConnreadFrom": "",
	"netIPConnreadMsg": "",
	"netIPConnwriteMsg": "",
	"netIPConnwriteTo": "",
	"netIPDefaultMask": "--- DefaultMask returns the default IP mask for the IP address ip.\n--- Only IPv4 addresses have default masks; DefaultMask returns\n--- nil if ip is not a valid IPv4 address.",
	"netIPEqual": "--- Equal reports whether ip and x are the same IP address.\n--- An IPv4 address and that same address in IPv6 form are\n--- considered to be equal.",
	"netIPIsGlobalUnicast": "--- IsGlobalUnicast reports whether ip is a global unicast\n--- address.\n---\n--- The identification of global unicast addresses uses address type\n--- identification as defined in RFC 1122, RFC 4632 and RFC 4291 with\n--- the exception of IPv4 directed broadcast addresses.\n--- It returns true even if ip is in IPv4 private address space or\n--- local IPv6 unicast address space.",
	"netIPIsInterfaceLocalMulticast": "--- IsInterfaceLocalMulticast reports whether ip is\n--- an interface-local multicast address.",
	"netIPIsLinkLocalMulticast": "--- IsLinkLocalMulticast reports whether ip is a link-local\n--- multicast address.",
	"netIPIsLinkLocalUnicast": "--- IsLinkLocalUnicast reports whether ip is a link-local\n--- unicast address.",
	"netIPIsLoopback": "--- IsLoopback reports whether ip is a loopback address.",
	"netIPIsMulticast": "--- IsMulticast reports whether ip is a multicast address.",
	"netIPIsPrivate": "--- IsPrivate reports whether ip is a private address, according to\n--- RFC 1918 (IPv4 addresses) and RFC 4193 (IPv6 addresses).",
	"netIPIsUnspecified": "--- IsUnspecified reports whether ip is an unspecified address, either\n--- the IPv4 address \"0.0.0.0\" or the IPv6 address \"::\".",
	"netIPMarshalText": "--- MarshalText implements the encoding.TextMarshaler interface.\n--- The encoding is the same as returned by String, with one exception:\n--- When len(ip) is zero, it returns an empty slice.",
	"netIPMask": "--- Mask returns the result of masking the IP address ip with mask.",
	"netIPMaskSize": "--- Size returns the number of leading ones and total bits in the mask.\n--- If the mask is not in the canonical form--ones followed by zeros--then\n--- Size returns 0, 0.",
	"netIPMaskString": "--- String returns the hexadecimal form of m, with no punctuation.",
	"netIPNetContains": "--- Contains reports whether the network includes ip.",
	"netIPNetNetwork": "--- Network returns the address's network name, \"ip+net\".",
	"netIPNetString": "--- String returns the CIDR notation of n like \"192.0.2.0/24\"\n--- or \"2001:db8::/48\" as defined in RFC 4632 and RFC 4291.\n--- If the mask is not in the canonical form, it returns the\n--- string which consists of an IP address, followed by a slash\n--- character and a mask expressed as hexadecimal form with no\n--- punctuation like \"198.51.100.0/c000ff00\".",
	"netIPString": "--- String returns the string form of the IP address ip.\n--- It returns one of 4 forms:\n---   - \"\u003cnil\u003e\", if ip has length 0\n---   - dotted decimal (\"192.0.2.1\"), if ip is an IPv4 or IP4-mapped IPv6 address\n---   - IPv6 conforming to RFC 5952 (\"2001:db8::1\"), if ip is a valid IPv6 address\n---   - the hexadecimal form of ip, without punctuation, if no other cases apply",
	"netIPTo16": "--- To16 converts the IP address ip to a 16-byte representation.\n--- If ip is not an IP address (it is the wrong length), To16 returns nil.",
	"netIPTo4": "--- To4 converts the IPv4 address ip to a 4-byte representation.\n--- If ip is not an IPv4 address, To4 returns nil.",
	"netIPUnmarshalText": "--- UnmarshalText implements the encoding.TextUnmarshaler interface.\n--- The IP address is expected in a form accepted by ParseIP.",
	"netIPmatchAddrFamily": "",
	"netIPv4": "--- IPv4 returns the IP address (in 16-byte form) of the\n--- IPv4 address a.b.c.d.",
	"netIPv4Mask": "--- IPv4Mask returns the IP mask (in 4-byte form) of the\n--- IPv4 mask a.b.c.d.",
	"netInterfaceAddrs": "--- Addrs returns a list of unicast interface addresses for a specific\n--- interface.",
	"netInterfaceByIndex": "--- InterfaceByIndex returns the interface specified by index.\n---\n--- On Solaris, it returns one of the logical network interfaces\n--- sharing the logical data link; for more precision use\n--- InterfaceByName.",
	"netInterfaceByName": "--- InterfaceByName returns the interface specified by name.",
	"netInterfaceMulticastAddrs": "--- MulticastAddrs returns a list of multicast, joined group addresses\n--- for a specific interface.",
	"netInterfaces": "--- Interfaces returns a list of the system's network interfaces.",
	"netInvalidAddrErrorError": "",
	"netInvalidAddrErrorTemporary": "",
	"netInvalidAddrErrorTimeout": "",
	"netJoinHostPort": "--- JoinHostPort combines host and port into a network address of the\n--- form \"host:port\". If host contains a colon, as found in literal\n--- IPv6 addresses, then JoinHostPort returns \"[host]:port\".\n---\n--- See func Dial for a description of the host and port parameters.",
	"netListen": "--- Listen announces on the local network address.\n---\n--- The network must be \"tcp\", \"tcp4\", \"tcp6\", \"unix\" or \"unixpacket\".\n---\n--- For TCP networks, if the host in the address parameter is empty or\n--- a literal unspecified IP address, Listen listens on all available\n--- unicast and anycast IP addresses of the local system.\n--- To only use IPv4, use network \"tcp4\".\n--- The address can use a host name, but this is not recommended,\n--- because it will create a listener for at most one of the host's IP\n--- addresses.\n--- If the port in the address parameter is empty or \"0\", as in\n--- \"127.0.0.1:\" or \"[::1]:0\", a port number is automatically chosen.\n--- The Addr method of Listener can be used to discover the chosen\n--- port.\n---\n--- See func Dial for a description of the network and address\n--- parameters.\n---\n--- Listen uses context.Background internally; to specify the context, use\n--- ListenConfig.Listen.",
	"netListenConfigListen": "--- Listen announces on the local network address.\n---\n--- See func Listen for a description of the network and address\n--- parameters.",
	"netListenConfigListenPacket": "--- ListenPacket announces on the local network address.\n---\n--- See func ListenPacket for a description of the network and address\n--- parameters.",
	"netListenIP": "--- ListenIP acts like ListenPacket for IP networks.\n---\n--- The network must be an IP network name; see func Dial for details.\n---\n--- If the IP field of laddr is nil or an unspecified IP address,\n--- ListenIP listens on all available IP addresses of the local system\n--- except multicast IP addresses.",
	"netListenMulticastUDP": "--- ListenMulticastUDP acts like ListenPacket for UDP networks but\n--- takes a group address on a specific network interface.\n---\n--- The network must be a UDP network name; see func Dial for details.\n---\n--- ListenMulticastUDP listens on all available IP addresses of the\n--- local system including the group, multicast IP address.\n--- If ifi is nil, ListenMulticastUDP uses the system-assigned\n--- multicast interface, although this is not recommended because the\n--- assignment depends on platforms and sometimes it might require\n--- routing configuration.\n--- If the Port field of gaddr is 0, a port number is automatically\n--- chosen.\n---\n--- ListenMulticastUDP is just for convenience of simple, small\n--- applications. There are golang.org/x/net/ipv4 and\n--- golang.org/x/net/ipv6 packages for general purpose uses.\n---\n--- Note that ListenMulticastUDP will set the IP_MULTICAST_LOOP socket option\n--- to 0 under IPPROTO_IP, to disable loopback of multicast packets.",
	"netListenPacket": "--- ListenPacket announces on the local network address.\n---\n--- The network must be \"udp\", \"udp4\", \"udp6\", \"unixgram\", or an IP\n--- transport. The IP transports are \"ip\", \"ip4\", or \"ip6\" followed by\n--- a colon and a literal protocol number or a protocol name, as in\n--- \"ip:1\" or \"ip:icmp\".\n---\n--- For UDP and IP networks, if the host in the address parameter is\n--- empty or a literal unspecified IP address, ListenPacket listens on\n--- all available IP addresses of the local system except multicast IP\n--- addresses.\n--- To only use IPv4, use network \"udp4\" or \"ip4:proto\".\n--- The address can use a host name, but this is not recommended,\n--- because it will create a listener for at most one of the host's IP\n--- addresses.\n--- If the port in the address parameter is empty or \"0\", as in\n--- \"127.0.0.1:\" or \"[::1]:0\", a port number is automatically chosen.\n--- The LocalAddr method of PacketConn can be used to discover the\n--- chosen port.\n---\n--- See func Dial for a description of the network and address\n--- parameters.\n---\n--- ListenPacket uses context.Background internally; to specify the context, use\n--- ListenConfig.ListenPacket.",
	"netListenTCP": "--- ListenTCP acts like Listen for TCP networks.\n---\n--- The network must be a TCP network name; see func Dial for details.\n---\n--- If the IP field of laddr is nil or an unspecified IP address,\n--- ListenTCP listens on all available unicast and anycast IP addresses\n--- of the local system.\n--- If the Port field of laddr is 0, a port number is automatically\n--- chosen.",
	"netListenUDP": "--- ListenUDP acts like ListenPacket for UDP networks.\n---\n--- The network must be a UDP network name; see func Dial for details.\n---\n--- If the IP field of laddr is nil or an unspecified IP address,\n--- ListenUDP listens on all available IP addresses of the local system\n--- except multicast IP addresses.\n--- If the Port field of laddr is 0, a port number is automatically\n--- chosen.",
	"netListenUnix": "--- ListenUnix acts like Listen for Unix networks.\n---\n--- The network must be \"unix\" or \"unixpacket\".",
	"netListenUnixgram": "--- ListenUnixgram acts like ListenPacket for Unix networks.\n---\n--- The network must be \"unixgram\".",
	"netLookupAddr": "--- LookupAddr performs a reverse lookup for the given address, returning a list\n--- of names mapping to that address.\n---\n--- The returned names are validated to be properly formatted presentation-format\n--- domain names. If the response contains invalid names, those records are filtered\n--- out and an error will be returned alongside the remaining results, if any.\n---\n--- When using the host C library resolver, at most one result will be\n--- returned. To bypass the host resolver, use a custom Resolver.\n---\n--- LookupAddr uses context.Background internally; to specify the context, use\n--- Resolver.LookupAddr.",
	"netLookupCNAME": "--- LookupCNAME returns the canonical name for the given host.\n--- Callers that do not care about the canonical name can call\n--- LookupHost or LookupIP directly; both take care of resolving\n--- the canonical name as part of the lookup.\n---\n--- A canonical name is the final name after following zero\n--- or more CNAME records.\n--- LookupCNAME does not return an error if host does not\n--- contain DNS \"CNAME\" records, as long as host resolves to\n--- address records.\n---\n--- The returned canonical name is validated to be a properly\n--- formatted presentation-format domain name.\n---\n--- LookupCNAME uses context.Background internally; to specify the context, use\n--- Resolver.LookupCNAME.",
	"netLookupHost": "--- LookupHost looks up the given host using the local resolver.\n--- It returns a slice of that host's addresses.\n---\n--- LookupHost uses context.Background internally; to specify the context, use\n--- Resolver.LookupHost.",
	"netLookupIP": "--- LookupIP looks up host using the local resolver.\n--- It returns a slice of that host's IPv4 and IPv6 addresses.",
	"netLookupMX": "--- LookupMX returns the DNS MX records for the given domain name sorted by preference.\n---\n--- The returned mail server names are validated to be properly\n--- formatted presentation-format domain names. If the response contains\n--- invalid names, those records are filtered out and an error\n--- will be returned alongside the remaining results, if any.\n---\n--- LookupMX uses context.Background internally; to specify the context, use\n--- Resolver.LookupMX.",
	"netLookupNS": "--- LookupNS returns the DNS NS records for the given domain name.\n---\n--- The returned name server names are validated to be properly\n--- formatted presentation-format domain names. If the response contains\n--- invalid names, those records are filtered out and an error\n--- will be returned alongside the remaining results, if any.\n---\n--- LookupNS uses context.Background internally; to specify the context, use\n--- Resolver.LookupNS.",
	"netLookupPort": "--- LookupPort looks up the port for the given network and service.\n---\n--- LookupPort uses context.Background internally; to specify the context, use\n--- Resolver.LookupPort.",
	"netLookupSRV": "--- LookupSRV tries to resolve an SRV query of the given service,\n--- protocol, and domain name. The proto is \"tcp\" or \"udp\".\n--- The returned records are sorted by priority and randomized\n--- by weight within a priority.\n---\n--- LookupSRV constructs the DNS name to look up following RFC 2782.\n--- That is, it looks up _service._proto.name. To accommodate services\n--- publishing SRV records under non-standard names, if both service\n--- and proto are empty strings, LookupSRV looks up name directly.\n---\n--- The returned service names are validated to be properly\n--- formatted presentation-format domain names. If the response contains\n--- invalid names, those records are filtered out and an error\n--- will be returned alongside the remaining results, if any.",
	"netLookupTXT": "--- LookupTXT returns the DNS TXT records for the given domain name.\n---\n--- LookupTXT uses context.Background internally; to specify the context, use\n--- Resolver.LookupTXT.",
	"netOpErrorError": "",
	"netOpErrorTemporary": "",
	"netOpErrorTimeout": "",
	"netOpErrorUnwrap": "",
	"netParseCIDR": "--- ParseCIDR parses s as a CIDR notation IP address and prefix length,\n--- like \"192.0.2.0/24\" or \"2001:db8::/32\", as defined in\n--- RFC 4632 and RFC 4291.\n---\n--- It returns the IP address and the network implied by the IP and\n--- prefix length.\n--- For example, ParseCIDR(\"192.0.2.1/24\") returns the IP address\n--- 192.0.2.1 and the network 192.0.2.0/24.",
	"netParseErrorError": "",
	"netParseErrorTemporary": "",
	"netParseErrorTimeout": "",
	"netParseIP": "--- ParseIP parses s as an IP address, returning the result.\n--- The string s can be in IPv4 dotted decimal (\"192.0.2.1\"), IPv6\n--- (\"2001:db8::68\"), or IPv4-mapped IPv6 (\"::ffff:192.0.2.1\") form.\n--- If s is not a valid textual representation of an IP address,\n--- ParseIP returns nil.",
	"netParseMAC": "--- ParseMAC parses s as an IEEE 802 MAC-48, EUI-48, EUI-64, or a 20-octet\n--- IP over InfiniBand link-layer address using one of the following formats:\n---\n---\t00:00:5e:00:53:01\n---\t02:00:5e:10:00:00:00:01\n---\t00:00:00:00:fe:80:00:00:00:00:00:00:02:00:5e:10:00:00:00:01\n---\t00-00-5e-00-53-01\n---\t02-00-5e-10-00-00-00-01\n---\t00-00-00-00-fe-80-00-00-00-00-00-00-02-00-5e-10-00-00-00-01\n---\t0000.5e00.5301\n---\t0200.5e10.0000.0001\n---\t0000.0000.fe80.0000.0000.0000.0200.5e10.0000.0001",
	"netPipe": "--- Pipe creates a synchronous, in-memory, full duplex\n--- network connection; both ends implement the Conn interface.\n--- Reads on one end are matched with writes on the other,\n--- copying data directly between the two; there is no internal\n--- buffering.",
	"netResolveIPAddr": "--- ResolveIPAddr returns an address of IP end point.\n---\n--- The network must be an IP network name.\n---\n--- If the host in the address parameter is not a literal IP address,\n--- ResolveIPAddr resolves the address to an address of IP end point.\n--- Otherwise, it parses the address as a literal IP address.\n--- The address parameter can use a host name, but this is not\n--- recommended, because it will return at most one of the host name's\n--- IP addresses.\n---\n--- See func Dial for a description of the network and address\n--- parameters.",
	"netResolveTCPAddr": "--- ResolveTCPAddr returns an address of TCP end point.\n---\n--- The network must be a TCP network name.\n---\n--- If the host in the address parameter is not a literal IP address or\n--- the port is not a literal port number, ResolveTCPAddr resolves the\n--- address to an address of TCP end point.\n--- Otherwise, it parses the address as a pair of literal IP address\n--- and port number.\n--- The address parameter can use a host name, but this is not\n--- recommended, because it will return at most one of the host name's\n--- IP addresses.\n---\n--- See func Dial for a description of the network and address\n--- parameters.",
	"netResolveUDPAddr": "--- ResolveUDPAddr returns an address of UDP end point.\n---\n--- The network must be a UDP network name.\n---\n--- If the host in the address parameter is not a literal IP address or\n--- the port is not a literal port number, ResolveUDPAddr resolves the\n--- address to an address of UDP end point.\n--- Otherwise, it parses the address as a pair of literal IP address\n--- and port number.\n--- The address parameter can use a host name, but this is not\n--- recommended, because it will return at most one of the host name's\n--- IP addresses.\n---\n--- See func Dial for a description of the network and address\n--- parameters.",
	"netResolveUnixAddr": "--- ResolveUnixAddr returns an address of Unix domain socket end point.\n---\n--- The network must be a Unix network name.\n---\n--- See func Dial for a description of the network and address\n--- parameters.",
	"netResolverlookup": "",
	"netSplitHostPort": "--- SplitHostPort splits a network address of the form \"host:port\",\n--- \"host%zone:port\", \"[host]:port\" or \"[host%zone]:port\" into host or\n--- host%zone and port.\n---\n--- A literal IPv6 address in hostport must be enclosed in square\n--- brackets, as in \"[::1]:80\", \"[::1%lo0]:80\".\n---\n--- See func Dial for a description of the hostport parameter, and host\n--- and port results.",
	"netTCPAddrFromAddrPort": "--- TCPAddrFromAddrPort returns addr as a TCPAddr. If addr.IsValid() is false,\n--- then the returned TCPAddr will contain a nil IP field, indicating an\n--- address family-agnostic unspecified address.",
	"netTCPAddrfamily": "",
	"netTCPAddrsockaddr": "",
	"netTCPAddrtoLocal": "",
	"netTCPConnreadFrom": "",
	"netTCPListeneraccept": "",
	"netTCPListenerclose": "",
	"netTCPListenerfile": "",
	"netTCPListenerok": "",
	"netUDPAddrFromAddrPort": "--- UDPAddrFromAddrPort returns addr as a UDPAddr. If addr.IsValid() is false,\n--- then the returned UDPAddr will contain a nil IP field, indicating an\n--- address family-agnostic unspecified address.",
	"netUDPAddrfamily": "",
	"netUDPAddrsockaddr": "",
	"netUDPAddrtoLocal": "",
	"netUDPConnreadFrom": "",
	"netUDPConnreadFromAddrPort": "",
	"netUDPConnreadMsg": "",
	"netUDPConnwriteMsg": "",
	"netUDPConnwriteMsgAddrPort": "",
	"netUDPConnwriteTo": "",
	"netUDPConnwriteToAddrPort": "",
	"netUnixAddrfamily": "",
	"netUnixAddrsockaddr": "",
	"netUnixAddrtoLocal": "",
	"netUnixConnreadFrom": "",
	"netUnixConnreadMsg": "",
	"netUnixConnwriteMsg": "",
	"netUnixConnwriteTo": "",
	"netUnixListenerSetUnlinkOnClose": "--- SetUnlinkOnClose sets whether the underlying socket file should be removed\n--- from the file system when the listener is closed.\n---\n--- The default behavior is to unlink the socket file only when package net created it.\n--- That is, when the listener and the underlying socket file were created by a call to\n--- Listen or ListenUnix, then by default closing the listener will remove the socket file.\n--- but if the listener was created by a call to FileListener to use an already existing\n--- socket file, then by default closing the listener will not remove the socket file.",
	"netUnixListeneraccept": "",
	"netUnixListenerclose": "",
	"netUnixListenerfile": "",
	"netUnknownNetworkErrorError": "",
	"netUnknownNetworkErrorTemporary": "",
	"netUnknownNetworkErrorTimeout": ""
}