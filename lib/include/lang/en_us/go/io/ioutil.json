{
	"ioutilNopCloser": "--- NopCloser returns a ReadCloser with a no-op Close method wrapping\n--- the provided Reader r.\n---\n--- Deprecated: As of Go 1.16, this function simply calls io.NopCloser.",
	"ioutilReadAll": "--- ReadAll reads from r until an error or EOF and returns the data it read.\n--- A successful call returns err == nil, not err == EOF. Because ReadAll is\n--- defined to read from src until EOF, it does not treat an EOF from Read\n--- as an error to be reported.\n---\n--- Deprecated: As of Go 1.16, this function simply calls io.ReadAll.",
	"ioutilReadDir": "--- ReadDir reads the directory named by dirname and returns\n--- a list of fs.FileInfo for the directory's contents,\n--- sorted by filename. If an error occurs reading the directory,\n--- ReadDir returns no directory entries along with the error.\n---\n--- Deprecated: As of Go 1.16, os.ReadDir is a more efficient and correct choice:\n--- it returns a list of fs.DirEntry instead of fs.FileInfo,\n--- and it returns partial results in the case of an error\n--- midway through reading a directory.\n---\n--- If you must continue obtaining a list of fs.FileInfo, you still can:\n---\n---\tentries, err := os.ReadDir(dirname)\n---\tif err != nil { ... }\n---\tinfos := make([]fs.FileInfo, 0, len(entries))\n---\tfor _, entry := range entries {\n---\t\tinfo, err := entry.Info()\n---\t\tif err != nil { ... }\n---\t\tinfos = append(infos, info)\n---\t}",
	"ioutilReadFile": "--- ReadFile reads the file named by filename and returns the contents.\n--- A successful call returns err == nil, not err == EOF. Because ReadFile\n--- reads the whole file, it does not treat an EOF from Read as an error\n--- to be reported.\n---\n--- Deprecated: As of Go 1.16, this function simply calls os.ReadFile.",
	"ioutilTempDir": "--- TempDir creates a new temporary directory in the directory dir.\n--- The directory name is generated by taking pattern and applying a\n--- random string to the end. If pattern includes a \"*\", the random string\n--- replaces the last \"*\". TempDir returns the name of the new directory.\n--- If dir is the empty string, TempDir uses the\n--- default directory for temporary files (see os.TempDir).\n--- Multiple programs calling TempDir simultaneously\n--- will not choose the same directory. It is the caller's responsibility\n--- to remove the directory when no longer needed.\n---\n--- Deprecated: As of Go 1.17, this function simply calls os.MkdirTemp.",
	"ioutilTempFile": "--- TempFile creates a new temporary file in the directory dir,\n--- opens the file for reading and writing, and returns the resulting *os.File.\n--- The filename is generated by taking pattern and adding a random\n--- string to the end. If pattern includes a \"*\", the random string\n--- replaces the last \"*\".\n--- If dir is the empty string, TempFile uses the default directory\n--- for temporary files (see os.TempDir).\n--- Multiple programs calling TempFile simultaneously\n--- will not choose the same file. The caller can use f.Name()\n--- to find the pathname of the file. It is the caller's responsibility\n--- to remove the file when no longer needed.\n---\n--- Deprecated: As of Go 1.17, this function simply calls os.CreateTemp.",
	"ioutilWriteFile": "--- WriteFile writes data to a file named by filename.\n--- If the file does not exist, WriteFile creates it with permissions perm\n--- (before umask); otherwise WriteFile truncates it before writing, without changing permissions.\n---\n--- Deprecated: As of Go 1.16, this function simply calls os.WriteFile."
}