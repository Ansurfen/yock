{
	"flateCorruptInputErrorError": "",
	"flateInternalErrorError": "",
	"flateNewReader": "--- NewReader returns a new ReadCloser that can be used\n--- to read the uncompressed version of r.\n--- If r does not also implement io.ByteReader,\n--- the decompressor may read more data than necessary from r.\n--- The reader returns io.EOF after the final block in the DEFLATE stream has\n--- been encountered. Any trailing data after the final block is ignored.\n---\n--- The ReadCloser returned by NewReader also implements Resetter.",
	"flateNewReaderDict": "--- NewReaderDict is like NewReader but initializes the reader\n--- with a preset dictionary. The returned Reader behaves as if\n--- the uncompressed data stream started with the given dictionary,\n--- which has already been read. NewReaderDict is typically used\n--- to read data compressed by NewWriterDict.\n---\n--- The ReadCloser returned by NewReader also implements Resetter.",
	"flateNewWriter": "--- NewWriter returns a new Writer compressing data at the given level.\n--- Following zlib, levels range from 1 (BestSpeed) to 9 (BestCompression);\n--- higher levels typically run slower but compress more. Level 0\n--- (NoCompression) does not attempt any compression; it only adds the\n--- necessary DEFLATE framing.\n--- Level -1 (DefaultCompression) uses the default compression level.\n--- Level -2 (HuffmanOnly) will use Huffman compression only, giving\n--- a very fast compression for all types of input, but sacrificing considerable\n--- compression efficiency.\n---\n--- If level is in the range [-2, 9] then the error returned will be nil.\n--- Otherwise the error returned will be non-nil.",
	"flateNewWriterDict": "--- NewWriterDict is like NewWriter but initializes the new\n--- Writer with a preset dictionary. The returned Writer behaves\n--- as if the dictionary had been written to it without producing\n--- any compressed output. The compressed data written to w\n--- can only be decompressed by a Reader initialized with the\n--- same dictionary.",
	"flateReadErrorError": "",
	"flateWriteErrorError": "",
	"flateWriterClose": "--- Close flushes and closes the writer.",
	"flateWriterFlush": "--- Flush flushes any pending data to the underlying writer.\n--- It is useful mainly in compressed network protocols, to ensure that\n--- a remote reader has enough data to reconstruct a packet.\n--- Flush does not return until the data has been written.\n--- Calling Flush when there is no pending data still causes the Writer\n--- to emit a sync marker of at least 4 bytes.\n--- If the underlying writer returns an error, Flush returns that error.\n---\n--- In the terminology of the zlib library, Flush is equivalent to Z_SYNC_FLUSH.",
	"flateWriterReset": "--- Reset discards the writer's state and makes it equivalent to\n--- the result of NewWriter or NewWriterDict called with dst\n--- and w's level and dictionary.",
	"flateWriterWrite": "--- Write writes data to w, which will eventually write the\n--- compressed form of data to its underlying writer."
}