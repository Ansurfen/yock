{
	"gzipNewReader": "--- NewReader creates a new Reader reading the given reader.\n--- If r does not also implement io.ByteReader,\n--- the decompressor may read more data than necessary from r.\n---\n--- It is the caller's responsibility to call Close on the Reader when done.\n---\n--- The Reader.Header fields will be valid in the Reader returned.",
	"gzipNewWriter": "--- NewWriter returns a new Writer.\n--- Writes to the returned writer are compressed and written to w.\n---\n--- It is the caller's responsibility to call Close on the Writer when done.\n--- Writes may be buffered and not flushed until Close.\n---\n--- Callers that wish to set the fields in Writer.Header must do so before\n--- the first call to Write, Flush, or Close.",
	"gzipNewWriterLevel": "--- NewWriterLevel is like NewWriter but specifies the compression level instead\n--- of assuming DefaultCompression.\n---\n--- The compression level can be DefaultCompression, NoCompression, HuffmanOnly\n--- or any integer value between BestSpeed and BestCompression inclusive.\n--- The error returned will be nil if the level is valid.",
	"gzipReaderClose": "--- Close closes the Reader. It does not close the underlying io.Reader.\n--- In order for the GZIP checksum to be verified, the reader must be\n--- fully consumed until the io.EOF.",
	"gzipReaderMultistream": "--- Multistream controls whether the reader supports multistream files.\n---\n--- If enabled (the default), the Reader expects the input to be a sequence\n--- of individually gzipped data streams, each with its own header and\n--- trailer, ending at EOF. The effect is that the concatenation of a sequence\n--- of gzipped files is treated as equivalent to the gzip of the concatenation\n--- of the sequence. This is standard behavior for gzip readers.\n---\n--- Calling Multistream(false) disables this behavior; disabling the behavior\n--- can be useful when reading file formats that distinguish individual gzip\n--- data streams or mix gzip data streams with other data streams.\n--- In this mode, when the Reader reaches the end of the data stream,\n--- Read returns io.EOF. The underlying reader must implement io.ByteReader\n--- in order to be left positioned just after the gzip stream.\n--- To start the next stream, call z.Reset(r) followed by z.Multistream(false).\n--- If there is no next stream, z.Reset(r) will return io.EOF.",
	"gzipReaderRead": "--- Read implements io.Reader, reading uncompressed bytes from its underlying Reader.",
	"gzipReaderReset": "--- Reset discards the Reader z's state and makes it equivalent to the\n--- result of its original state from NewReader, but reading from r instead.\n--- This permits reusing a Reader rather than allocating a new one.",
	"gzipReaderreadHeader": "--- readHeader reads the GZIP header according to section 2.3.1.\n--- This method does not set z.err.",
	"gzipReaderreadString": "--- readString reads a NUL-terminated string from z.r.\n--- It treats the bytes read as being encoded as ISO 8859-1 (Latin-1) and\n--- will output a string encoded using UTF-8.\n--- This method always updates z.digest with the data read.",
	"gzipWriterClose": "--- Close closes the Writer by flushing any unwritten data to the underlying\n--- io.Writer and writing the GZIP footer.\n--- It does not close the underlying io.Writer.",
	"gzipWriterFlush": "--- Flush flushes any pending compressed data to the underlying writer.\n---\n--- It is useful mainly in compressed network protocols, to ensure that\n--- a remote reader has enough data to reconstruct a packet. Flush does\n--- not return until the data has been written. If the underlying\n--- writer returns an error, Flush returns that error.\n---\n--- In the terminology of the zlib library, Flush is equivalent to Z_SYNC_FLUSH.",
	"gzipWriterReset": "--- Reset discards the Writer z's state and makes it equivalent to the\n--- result of its original state from NewWriter or NewWriterLevel, but\n--- writing to w instead. This permits reusing a Writer rather than\n--- allocating a new one.",
	"gzipWriterWrite": "--- Write writes a compressed form of p to the underlying io.Writer. The\n--- compressed bytes are not necessarily flushed until the Writer is closed.",
	"gzipWriterinit": "",
	"gzipWriterwriteBytes": "--- writeBytes writes a length-prefixed byte slice to z.w.",
	"gzipWriterwriteString": "--- writeString writes a UTF-8 string s in GZIP's format to z.w.\n--- GZIP (RFC 1952) specifies that strings are NUL-terminated ISO 8859-1 (Latin-1)."
}