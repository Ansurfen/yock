{
	"tarReaderOpen": "--- Open opens the named file in the ZIP archive,\n--- using the semantics of fs.FS.Open:\n--- paths are always slash separated, with no\n--- leading / or ../ elements.",
	"tarReaderRegisterDecompressor": "--- RegisterDecompressor registers or overrides a custom decompressor for a\n--- specific method ID. If a decompressor for a given method is not found,\n--- Reader will default to looking up the decompressor at the package level.",
	"tarReaderdecompressor": "",
	"tarReaderinit": "",
	"tarReaderinitFileList": "",
	"tarReaderopenLookup": "",
	"tarReaderopenReadDir": "",
	"tarWriterClose": "--- Close finishes writing the zip file by writing the central directory.\n--- It does not close the underlying writer.",
	"tarWriterCopy": "--- Copy copies the file f (obtained from a Reader) into w. It copies the raw\n--- form directly bypassing decompression, compression, and validation.",
	"tarWriterCreate": "--- Create adds a file to the zip file using the provided name.\n--- It returns a Writer to which the file contents should be written.\n--- The file contents will be compressed using the Deflate method.\n--- The name must be a relative path: it must not start with a drive\n--- letter (e.g. C:) or leading slash, and only forward slashes are\n--- allowed. To create a directory instead of a file, add a trailing\n--- slash to the name.\n--- The file's contents must be written to the io.Writer before the next\n--- call to Create, CreateHeader, or Close.",
	"tarWriterCreateHeader": "--- CreateHeader adds a file to the zip archive using the provided FileHeader\n--- for the file metadata. Writer takes ownership of fh and may mutate\n--- its fields. The caller must not modify fh after calling CreateHeader.\n---\n--- This returns a Writer to which the file contents should be written.\n--- The file's contents must be written to the io.Writer before the next\n--- call to Create, CreateHeader, CreateRaw, or Close.",
	"tarWriterCreateRaw": "--- CreateRaw adds a file to the zip archive using the provided FileHeader and\n--- returns a Writer to which the file contents should be written. The file's\n--- contents must be written to the io.Writer before the next call to Create,\n--- CreateHeader, CreateRaw, or Close.\n---\n--- In contrast to CreateHeader, the bytes passed to Writer are not compressed.",
	"tarWriterFlush": "--- Flush flushes any buffered data to the underlying writer.\n--- Calling Flush is not normally necessary; calling Close is sufficient.",
	"tarWriterRegisterCompressor": "--- RegisterCompressor registers or overrides a custom compressor for a specific\n--- method ID. If a compressor for a given method is not found, Writer will\n--- default to looking up the compressor at the package level.",
	"tarWriterSetComment": "--- SetComment sets the end-of-central-directory comment field.\n--- It can only be called before Close.",
	"tarWriterSetOffset": "--- SetOffset sets the offset of the beginning of the zip data within the\n--- underlying writer. It should be used when the zip data is appended to an\n--- existing file, such as a binary executable.\n--- It must be called before any data is written.",
	"tarWritercompressor": "",
	"tarWriterprepare": "--- prepare performs the bookkeeping operations required at the start of\n--- CreateHeader and CreateRaw.",
	"zipFileDataOffset": "--- DataOffset returns the offset of the file's possibly-compressed\n--- data, relative to the beginning of the zip file.\n---\n--- Most callers should instead use Open, which transparently\n--- decompresses data and verifies checksums.",
	"zipFileHeaderFileInfo": "--- FileInfo returns an fs.FileInfo for the FileHeader.",
	"zipFileHeaderModTime": "--- ModTime returns the modification time in UTC using the legacy\n--- ModifiedDate and ModifiedTime fields.\n---\n--- Deprecated: Use Modified instead.",
	"zipFileHeaderMode": "--- Mode returns the permission and mode bits for the FileHeader.",
	"zipFileHeaderSetModTime": "--- SetModTime sets the Modified, ModifiedTime, and ModifiedDate fields\n--- to the given time in UTC.\n---\n--- Deprecated: Use Modified instead.",
	"zipFileHeaderSetMode": "--- SetMode changes the permission and mode bits for the FileHeader.",
	"zipFileHeaderhasDataDescriptor": "",
	"zipFileHeaderisZip64": "--- isZip64 reports whether the file size exceeds the 32 bit limit",
	"zipFileInfoHeader": "--- FileInfoHeader creates a partially-populated FileHeader from an\n--- fs.FileInfo.\n--- Because fs.FileInfo's Name method returns only the base name of\n--- the file it describes, it may be necessary to modify the Name field\n--- of the returned header to provide the full path name of the file.\n--- If compression is desired, callers should set the FileHeader.Method\n--- field; it is unset by default.",
	"zipFileOpen": "--- Open returns a ReadCloser that provides access to the File's contents.\n--- Multiple files may be read concurrently.",
	"zipFileOpenRaw": "--- OpenRaw returns a Reader that provides access to the File's contents without\n--- decompression.",
	"zipFilefindBodyOffset": "--- findBodyOffset does the minimum work to verify the file has a header\n--- and returns the file body offset.",
	"zipNewReader": "--- NewReader returns a new Reader reading from r, which is assumed to\n--- have the given size in bytes.\n---\n--- If any file inside the archive uses a non-local name\n--- (as defined by [filepath.IsLocal]) or a name containing backslashes\n--- and the GODEBUG environment variable contains `zipinsecurepath=0`,\n--- NewReader returns the reader with an ErrInsecurePath error.\n--- A future version of Go may introduce this behavior by default.\n--- Programs that want to accept non-local names can ignore\n--- the ErrInsecurePath error and use the returned reader.",
	"zipNewWriter": "--- NewWriter returns a new Writer writing a zip file to w.",
	"zipOpenReader": "--- OpenReader will open the Zip file specified by name and return a ReadCloser.",
	"zipReadCloserClose": "--- Close closes the Zip file, rendering it unusable for I/O.",
	"zipRegisterCompressor": "--- RegisterCompressor registers custom compressors for a specified method ID.\n--- The common methods Store and Deflate are built in.",
	"zipRegisterDecompressor": "--- RegisterDecompressor allows custom decompressors for a specified method ID.\n--- The common methods Store and Deflate are built in."
}